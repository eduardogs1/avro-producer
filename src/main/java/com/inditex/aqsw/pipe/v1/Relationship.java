/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.aqsw.pipe.v1;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Represents a relationship between the message and a specific business entity */
@org.apache.avro.specific.AvroGenerated
public class Relationship extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -930383527953651265L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Relationship\",\"namespace\":\"com.inditex.aqsw.pipe.v1\",\"doc\":\"Represents a relationship between the message and a specific business entity\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Unique name of the entity\"},{\"name\":\"domain\",\"type\":\"string\",\"doc\":\"Functional domain. I.e. 'ECommerce'\"},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"doc\":\"Version of the entity definition\",\"default\":null},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"RelationshipType\",\"symbols\":[\"createdBy\",\"causes\",\"dependsOn\",\"hasA\",\"partOf\",\"memberOf\"]},\"doc\":\"Specific type of the relationship between the event and the business entity\"},{\"name\":\"data\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"Specific data of the related entity at the moment the event is triggered\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Relationship> ENCODER =
      new BinaryMessageEncoder<Relationship>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Relationship> DECODER =
      new BinaryMessageDecoder<Relationship>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Relationship> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Relationship> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Relationship>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Relationship to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Relationship from a ByteBuffer. */
  public static Relationship fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique name of the entity */
  @Deprecated public java.lang.CharSequence name;
  /** Functional domain. I.e. 'ECommerce' */
  @Deprecated public java.lang.CharSequence domain;
  /** Version of the entity definition */
  @Deprecated public java.lang.CharSequence version;
  /** Specific type of the relationship between the event and the business entity */
  @Deprecated public com.inditex.aqsw.pipe.v1.RelationshipType type;
  /** Specific data of the related entity at the moment the event is triggered */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Relationship() {}

  /**
   * All-args constructor.
   * @param name Unique name of the entity
   * @param domain Functional domain. I.e. 'ECommerce'
   * @param version Version of the entity definition
   * @param type Specific type of the relationship between the event and the business entity
   * @param data Specific data of the related entity at the moment the event is triggered
   */
  public Relationship(java.lang.CharSequence name, java.lang.CharSequence domain, java.lang.CharSequence version, com.inditex.aqsw.pipe.v1.RelationshipType type, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> data) {
    this.name = name;
    this.domain = domain;
    this.version = version;
    this.type = type;
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return domain;
    case 2: return version;
    case 3: return type;
    case 4: return data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: domain = (java.lang.CharSequence)value$; break;
    case 2: version = (java.lang.CharSequence)value$; break;
    case 3: type = (com.inditex.aqsw.pipe.v1.RelationshipType)value$; break;
    case 4: data = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return Unique name of the entity
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Unique name of the entity
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'domain' field.
   * @return Functional domain. I.e. 'ECommerce'
   */
  public java.lang.CharSequence getDomain() {
    return domain;
  }

  /**
   * Sets the value of the 'domain' field.
   * Functional domain. I.e. 'ECommerce'
   * @param value the value to set.
   */
  public void setDomain(java.lang.CharSequence value) {
    this.domain = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return Version of the entity definition
   */
  public java.lang.CharSequence getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * Version of the entity definition
   * @param value the value to set.
   */
  public void setVersion(java.lang.CharSequence value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Specific type of the relationship between the event and the business entity
   */
  public com.inditex.aqsw.pipe.v1.RelationshipType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * Specific type of the relationship between the event and the business entity
   * @param value the value to set.
   */
  public void setType(com.inditex.aqsw.pipe.v1.RelationshipType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return Specific data of the related entity at the moment the event is triggered
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * Specific data of the related entity at the moment the event is triggered
   * @param value the value to set.
   */
  public void setData(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.data = value;
  }

  /**
   * Creates a new Relationship RecordBuilder.
   * @return A new Relationship RecordBuilder
   */
  public static com.inditex.aqsw.pipe.v1.Relationship.Builder newBuilder() {
    return new com.inditex.aqsw.pipe.v1.Relationship.Builder();
  }

  /**
   * Creates a new Relationship RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Relationship RecordBuilder
   */
  public static com.inditex.aqsw.pipe.v1.Relationship.Builder newBuilder(com.inditex.aqsw.pipe.v1.Relationship.Builder other) {
    return new com.inditex.aqsw.pipe.v1.Relationship.Builder(other);
  }

  /**
   * Creates a new Relationship RecordBuilder by copying an existing Relationship instance.
   * @param other The existing instance to copy.
   * @return A new Relationship RecordBuilder
   */
  public static com.inditex.aqsw.pipe.v1.Relationship.Builder newBuilder(com.inditex.aqsw.pipe.v1.Relationship other) {
    return new com.inditex.aqsw.pipe.v1.Relationship.Builder(other);
  }

  /**
   * RecordBuilder for Relationship instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Relationship>
    implements org.apache.avro.data.RecordBuilder<Relationship> {

    /** Unique name of the entity */
    private java.lang.CharSequence name;
    /** Functional domain. I.e. 'ECommerce' */
    private java.lang.CharSequence domain;
    /** Version of the entity definition */
    private java.lang.CharSequence version;
    /** Specific type of the relationship between the event and the business entity */
    private com.inditex.aqsw.pipe.v1.RelationshipType type;
    /** Specific data of the related entity at the moment the event is triggered */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.aqsw.pipe.v1.Relationship.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.domain)) {
        this.domain = data().deepCopy(fields()[1].schema(), other.domain);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.version)) {
        this.version = data().deepCopy(fields()[2].schema(), other.version);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.data)) {
        this.data = data().deepCopy(fields()[4].schema(), other.data);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Relationship instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.aqsw.pipe.v1.Relationship other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.domain)) {
        this.domain = data().deepCopy(fields()[1].schema(), other.domain);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.version)) {
        this.version = data().deepCopy(fields()[2].schema(), other.version);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.data)) {
        this.data = data().deepCopy(fields()[4].schema(), other.data);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * Unique name of the entity
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Unique name of the entity
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.Relationship.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Unique name of the entity
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * Unique name of the entity
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.Relationship.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'domain' field.
      * Functional domain. I.e. 'ECommerce'
      * @return The value.
      */
    public java.lang.CharSequence getDomain() {
      return domain;
    }

    /**
      * Sets the value of the 'domain' field.
      * Functional domain. I.e. 'ECommerce'
      * @param value The value of 'domain'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.Relationship.Builder setDomain(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.domain = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'domain' field has been set.
      * Functional domain. I.e. 'ECommerce'
      * @return True if the 'domain' field has been set, false otherwise.
      */
    public boolean hasDomain() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'domain' field.
      * Functional domain. I.e. 'ECommerce'
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.Relationship.Builder clearDomain() {
      domain = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * Version of the entity definition
      * @return The value.
      */
    public java.lang.CharSequence getVersion() {
      return version;
    }

    /**
      * Sets the value of the 'version' field.
      * Version of the entity definition
      * @param value The value of 'version'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.Relationship.Builder setVersion(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.version = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * Version of the entity definition
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'version' field.
      * Version of the entity definition
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.Relationship.Builder clearVersion() {
      version = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Specific type of the relationship between the event and the business entity
      * @return The value.
      */
    public com.inditex.aqsw.pipe.v1.RelationshipType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * Specific type of the relationship between the event and the business entity
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.Relationship.Builder setType(com.inditex.aqsw.pipe.v1.RelationshipType value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Specific type of the relationship between the event and the business entity
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * Specific type of the relationship between the event and the business entity
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.Relationship.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * Specific data of the related entity at the moment the event is triggered
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getData() {
      return data;
    }

    /**
      * Sets the value of the 'data' field.
      * Specific data of the related entity at the moment the event is triggered
      * @param value The value of 'data'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.Relationship.Builder setData(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.data = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * Specific data of the related entity at the moment the event is triggered
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'data' field.
      * Specific data of the related entity at the moment the event is triggered
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.Relationship.Builder clearData() {
      data = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Relationship build() {
      try {
        Relationship record = new Relationship();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.domain = fieldSetFlags()[1] ? this.domain : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.version = fieldSetFlags()[2] ? this.version : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (com.inditex.aqsw.pipe.v1.RelationshipType) defaultValue(fields()[3]);
        record.data = fieldSetFlags()[4] ? this.data : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Relationship>
    WRITER$ = (org.apache.avro.io.DatumWriter<Relationship>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Relationship>
    READER$ = (org.apache.avro.io.DatumReader<Relationship>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
