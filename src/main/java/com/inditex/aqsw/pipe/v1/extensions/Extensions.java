/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.aqsw.pipe.v1.extensions;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Set of attributes for attaching common information to the event with analytic purposes */
@org.apache.avro.specific.AvroGenerated
public class Extensions extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8230639050906140816L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Extensions\",\"namespace\":\"com.inditex.aqsw.pipe.v1.extensions\",\"doc\":\"Set of attributes for attaching common information to the event with analytic purposes\",\"fields\":[{\"name\":\"flows\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LifecycleExtension\",\"doc\":\"Information about the transition represented by the event in the life cycle of a process model or artifact\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Process model or artifact related to the event\"},{\"name\":\"domain\",\"type\":[\"null\",\"string\"],\"doc\":\"Domain of the process model or artifact related to the event\",\"default\":null},{\"name\":\"instance\",\"type\":[\"null\",\"string\"],\"doc\":\"Specific instance of the process model or artifact, if it's known\",\"default\":null},{\"name\":\"correlation\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"Correlation identifiers between states of a flow. They will be defined for each functional case with the Data Architecture Analytics team.\",\"default\":null},{\"name\":\"transition\",\"type\":[\"null\",\"string\"],\"doc\":\"Lifecycle transition represented by the event\",\"default\":null},{\"name\":\"state\",\"type\":[\"null\",\"string\"],\"doc\":\"Specifies the state reached within the process model or the artifact lifecycle that triggered the event\",\"default\":null}]}}],\"doc\":\"Information about process models or artifacts the event is related to\",\"default\":null},{\"name\":\"geo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"GeoExtension\",\"doc\":\"Information about geographical points and shapes related with an event\",\"fields\":[{\"name\":\"point\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"GeoPoint\",\"doc\":\"Information about geographical points in WGS84 reference system\",\"fields\":[{\"name\":\"lon\",\"type\":\"double\",\"doc\":\"Longitude of the geopoint\"},{\"name\":\"lat\",\"type\":\"double\",\"doc\":\"Latitude of the geopoint\"}]}],\"doc\":\"Geographical point related to the event in WGS84 reference system\",\"default\":null},{\"name\":\"features\",\"type\":[\"null\",\"string\"],\"doc\":\"Geographical features related to the event in GeoJSON format\",\"default\":null}]}],\"doc\":\"Information about location related to the event\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Extensions> ENCODER =
      new BinaryMessageEncoder<Extensions>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Extensions> DECODER =
      new BinaryMessageDecoder<Extensions>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Extensions> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Extensions> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Extensions>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Extensions to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Extensions from a ByteBuffer. */
  public static Extensions fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Information about process models or artifacts the event is related to */
  @Deprecated public java.util.List<com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension> flows;
  /** Information about location related to the event */
  @Deprecated public com.inditex.aqsw.pipe.v1.extensions.GeoExtension geo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Extensions() {}

  /**
   * All-args constructor.
   * @param flows Information about process models or artifacts the event is related to
   * @param geo Information about location related to the event
   */
  public Extensions(java.util.List<com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension> flows, com.inditex.aqsw.pipe.v1.extensions.GeoExtension geo) {
    this.flows = flows;
    this.geo = geo;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return flows;
    case 1: return geo;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: flows = (java.util.List<com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension>)value$; break;
    case 1: geo = (com.inditex.aqsw.pipe.v1.extensions.GeoExtension)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'flows' field.
   * @return Information about process models or artifacts the event is related to
   */
  public java.util.List<com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension> getFlows() {
    return flows;
  }

  /**
   * Sets the value of the 'flows' field.
   * Information about process models or artifacts the event is related to
   * @param value the value to set.
   */
  public void setFlows(java.util.List<com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension> value) {
    this.flows = value;
  }

  /**
   * Gets the value of the 'geo' field.
   * @return Information about location related to the event
   */
  public com.inditex.aqsw.pipe.v1.extensions.GeoExtension getGeo() {
    return geo;
  }

  /**
   * Sets the value of the 'geo' field.
   * Information about location related to the event
   * @param value the value to set.
   */
  public void setGeo(com.inditex.aqsw.pipe.v1.extensions.GeoExtension value) {
    this.geo = value;
  }

  /**
   * Creates a new Extensions RecordBuilder.
   * @return A new Extensions RecordBuilder
   */
  public static com.inditex.aqsw.pipe.v1.extensions.Extensions.Builder newBuilder() {
    return new com.inditex.aqsw.pipe.v1.extensions.Extensions.Builder();
  }

  /**
   * Creates a new Extensions RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Extensions RecordBuilder
   */
  public static com.inditex.aqsw.pipe.v1.extensions.Extensions.Builder newBuilder(com.inditex.aqsw.pipe.v1.extensions.Extensions.Builder other) {
    return new com.inditex.aqsw.pipe.v1.extensions.Extensions.Builder(other);
  }

  /**
   * Creates a new Extensions RecordBuilder by copying an existing Extensions instance.
   * @param other The existing instance to copy.
   * @return A new Extensions RecordBuilder
   */
  public static com.inditex.aqsw.pipe.v1.extensions.Extensions.Builder newBuilder(com.inditex.aqsw.pipe.v1.extensions.Extensions other) {
    return new com.inditex.aqsw.pipe.v1.extensions.Extensions.Builder(other);
  }

  /**
   * RecordBuilder for Extensions instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Extensions>
    implements org.apache.avro.data.RecordBuilder<Extensions> {

    /** Information about process models or artifacts the event is related to */
    private java.util.List<com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension> flows;
    /** Information about location related to the event */
    private com.inditex.aqsw.pipe.v1.extensions.GeoExtension geo;
    private com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder geoBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.aqsw.pipe.v1.extensions.Extensions.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.flows)) {
        this.flows = data().deepCopy(fields()[0].schema(), other.flows);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.geo)) {
        this.geo = data().deepCopy(fields()[1].schema(), other.geo);
        fieldSetFlags()[1] = true;
      }
      if (other.hasGeoBuilder()) {
        this.geoBuilder = com.inditex.aqsw.pipe.v1.extensions.GeoExtension.newBuilder(other.getGeoBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Extensions instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.aqsw.pipe.v1.extensions.Extensions other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.flows)) {
        this.flows = data().deepCopy(fields()[0].schema(), other.flows);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.geo)) {
        this.geo = data().deepCopy(fields()[1].schema(), other.geo);
        fieldSetFlags()[1] = true;
      }
      this.geoBuilder = null;
    }

    /**
      * Gets the value of the 'flows' field.
      * Information about process models or artifacts the event is related to
      * @return The value.
      */
    public java.util.List<com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension> getFlows() {
      return flows;
    }

    /**
      * Sets the value of the 'flows' field.
      * Information about process models or artifacts the event is related to
      * @param value The value of 'flows'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.Extensions.Builder setFlows(java.util.List<com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension> value) {
      validate(fields()[0], value);
      this.flows = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'flows' field has been set.
      * Information about process models or artifacts the event is related to
      * @return True if the 'flows' field has been set, false otherwise.
      */
    public boolean hasFlows() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'flows' field.
      * Information about process models or artifacts the event is related to
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.Extensions.Builder clearFlows() {
      flows = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'geo' field.
      * Information about location related to the event
      * @return The value.
      */
    public com.inditex.aqsw.pipe.v1.extensions.GeoExtension getGeo() {
      return geo;
    }

    /**
      * Sets the value of the 'geo' field.
      * Information about location related to the event
      * @param value The value of 'geo'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.Extensions.Builder setGeo(com.inditex.aqsw.pipe.v1.extensions.GeoExtension value) {
      validate(fields()[1], value);
      this.geoBuilder = null;
      this.geo = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'geo' field has been set.
      * Information about location related to the event
      * @return True if the 'geo' field has been set, false otherwise.
      */
    public boolean hasGeo() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'geo' field and creates one if it doesn't exist yet.
     * Information about location related to the event
     * @return This builder.
     */
    public com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder getGeoBuilder() {
      if (geoBuilder == null) {
        if (hasGeo()) {
          setGeoBuilder(com.inditex.aqsw.pipe.v1.extensions.GeoExtension.newBuilder(geo));
        } else {
          setGeoBuilder(com.inditex.aqsw.pipe.v1.extensions.GeoExtension.newBuilder());
        }
      }
      return geoBuilder;
    }

    /**
     * Sets the Builder instance for the 'geo' field
     * Information about location related to the event
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.inditex.aqsw.pipe.v1.extensions.Extensions.Builder setGeoBuilder(com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder value) {
      clearGeo();
      geoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'geo' field has an active Builder instance
     * Information about location related to the event
     * @return True if the 'geo' field has an active Builder instance
     */
    public boolean hasGeoBuilder() {
      return geoBuilder != null;
    }

    /**
      * Clears the value of the 'geo' field.
      * Information about location related to the event
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.Extensions.Builder clearGeo() {
      geo = null;
      geoBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Extensions build() {
      try {
        Extensions record = new Extensions();
        record.flows = fieldSetFlags()[0] ? this.flows : (java.util.List<com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension>) defaultValue(fields()[0]);
        if (geoBuilder != null) {
          record.geo = this.geoBuilder.build();
        } else {
          record.geo = fieldSetFlags()[1] ? this.geo : (com.inditex.aqsw.pipe.v1.extensions.GeoExtension) defaultValue(fields()[1]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Extensions>
    WRITER$ = (org.apache.avro.io.DatumWriter<Extensions>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Extensions>
    READER$ = (org.apache.avro.io.DatumReader<Extensions>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
