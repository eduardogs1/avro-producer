/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.aqsw.pipe.v1.extensions;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Information about geographical points and shapes related with an event */
@org.apache.avro.specific.AvroGenerated
public class GeoExtension extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8098561390527832467L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GeoExtension\",\"namespace\":\"com.inditex.aqsw.pipe.v1.extensions\",\"doc\":\"Information about geographical points and shapes related with an event\",\"fields\":[{\"name\":\"point\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"GeoPoint\",\"doc\":\"Information about geographical points in WGS84 reference system\",\"fields\":[{\"name\":\"lon\",\"type\":\"double\",\"doc\":\"Longitude of the geopoint\"},{\"name\":\"lat\",\"type\":\"double\",\"doc\":\"Latitude of the geopoint\"}]}],\"doc\":\"Geographical point related to the event in WGS84 reference system\",\"default\":null},{\"name\":\"features\",\"type\":[\"null\",\"string\"],\"doc\":\"Geographical features related to the event in GeoJSON format\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GeoExtension> ENCODER =
      new BinaryMessageEncoder<GeoExtension>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GeoExtension> DECODER =
      new BinaryMessageDecoder<GeoExtension>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<GeoExtension> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<GeoExtension> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<GeoExtension>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this GeoExtension to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a GeoExtension from a ByteBuffer. */
  public static GeoExtension fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Geographical point related to the event in WGS84 reference system */
  @Deprecated public com.inditex.aqsw.pipe.v1.extensions.GeoPoint point;
  /** Geographical features related to the event in GeoJSON format */
  @Deprecated public java.lang.CharSequence features;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GeoExtension() {}

  /**
   * All-args constructor.
   * @param point Geographical point related to the event in WGS84 reference system
   * @param features Geographical features related to the event in GeoJSON format
   */
  public GeoExtension(com.inditex.aqsw.pipe.v1.extensions.GeoPoint point, java.lang.CharSequence features) {
    this.point = point;
    this.features = features;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return point;
    case 1: return features;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: point = (com.inditex.aqsw.pipe.v1.extensions.GeoPoint)value$; break;
    case 1: features = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'point' field.
   * @return Geographical point related to the event in WGS84 reference system
   */
  public com.inditex.aqsw.pipe.v1.extensions.GeoPoint getPoint() {
    return point;
  }

  /**
   * Sets the value of the 'point' field.
   * Geographical point related to the event in WGS84 reference system
   * @param value the value to set.
   */
  public void setPoint(com.inditex.aqsw.pipe.v1.extensions.GeoPoint value) {
    this.point = value;
  }

  /**
   * Gets the value of the 'features' field.
   * @return Geographical features related to the event in GeoJSON format
   */
  public java.lang.CharSequence getFeatures() {
    return features;
  }

  /**
   * Sets the value of the 'features' field.
   * Geographical features related to the event in GeoJSON format
   * @param value the value to set.
   */
  public void setFeatures(java.lang.CharSequence value) {
    this.features = value;
  }

  /**
   * Creates a new GeoExtension RecordBuilder.
   * @return A new GeoExtension RecordBuilder
   */
  public static com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder newBuilder() {
    return new com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder();
  }

  /**
   * Creates a new GeoExtension RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GeoExtension RecordBuilder
   */
  public static com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder newBuilder(com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder other) {
    return new com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder(other);
  }

  /**
   * Creates a new GeoExtension RecordBuilder by copying an existing GeoExtension instance.
   * @param other The existing instance to copy.
   * @return A new GeoExtension RecordBuilder
   */
  public static com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder newBuilder(com.inditex.aqsw.pipe.v1.extensions.GeoExtension other) {
    return new com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder(other);
  }

  /**
   * RecordBuilder for GeoExtension instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GeoExtension>
    implements org.apache.avro.data.RecordBuilder<GeoExtension> {

    /** Geographical point related to the event in WGS84 reference system */
    private com.inditex.aqsw.pipe.v1.extensions.GeoPoint point;
    private com.inditex.aqsw.pipe.v1.extensions.GeoPoint.Builder pointBuilder;
    /** Geographical features related to the event in GeoJSON format */
    private java.lang.CharSequence features;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.point)) {
        this.point = data().deepCopy(fields()[0].schema(), other.point);
        fieldSetFlags()[0] = true;
      }
      if (other.hasPointBuilder()) {
        this.pointBuilder = com.inditex.aqsw.pipe.v1.extensions.GeoPoint.newBuilder(other.getPointBuilder());
      }
      if (isValidValue(fields()[1], other.features)) {
        this.features = data().deepCopy(fields()[1].schema(), other.features);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing GeoExtension instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.aqsw.pipe.v1.extensions.GeoExtension other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.point)) {
        this.point = data().deepCopy(fields()[0].schema(), other.point);
        fieldSetFlags()[0] = true;
      }
      this.pointBuilder = null;
      if (isValidValue(fields()[1], other.features)) {
        this.features = data().deepCopy(fields()[1].schema(), other.features);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'point' field.
      * Geographical point related to the event in WGS84 reference system
      * @return The value.
      */
    public com.inditex.aqsw.pipe.v1.extensions.GeoPoint getPoint() {
      return point;
    }

    /**
      * Sets the value of the 'point' field.
      * Geographical point related to the event in WGS84 reference system
      * @param value The value of 'point'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder setPoint(com.inditex.aqsw.pipe.v1.extensions.GeoPoint value) {
      validate(fields()[0], value);
      this.pointBuilder = null;
      this.point = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'point' field has been set.
      * Geographical point related to the event in WGS84 reference system
      * @return True if the 'point' field has been set, false otherwise.
      */
    public boolean hasPoint() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'point' field and creates one if it doesn't exist yet.
     * Geographical point related to the event in WGS84 reference system
     * @return This builder.
     */
    public com.inditex.aqsw.pipe.v1.extensions.GeoPoint.Builder getPointBuilder() {
      if (pointBuilder == null) {
        if (hasPoint()) {
          setPointBuilder(com.inditex.aqsw.pipe.v1.extensions.GeoPoint.newBuilder(point));
        } else {
          setPointBuilder(com.inditex.aqsw.pipe.v1.extensions.GeoPoint.newBuilder());
        }
      }
      return pointBuilder;
    }

    /**
     * Sets the Builder instance for the 'point' field
     * Geographical point related to the event in WGS84 reference system
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder setPointBuilder(com.inditex.aqsw.pipe.v1.extensions.GeoPoint.Builder value) {
      clearPoint();
      pointBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'point' field has an active Builder instance
     * Geographical point related to the event in WGS84 reference system
     * @return True if the 'point' field has an active Builder instance
     */
    public boolean hasPointBuilder() {
      return pointBuilder != null;
    }

    /**
      * Clears the value of the 'point' field.
      * Geographical point related to the event in WGS84 reference system
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder clearPoint() {
      point = null;
      pointBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'features' field.
      * Geographical features related to the event in GeoJSON format
      * @return The value.
      */
    public java.lang.CharSequence getFeatures() {
      return features;
    }

    /**
      * Sets the value of the 'features' field.
      * Geographical features related to the event in GeoJSON format
      * @param value The value of 'features'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder setFeatures(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.features = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'features' field has been set.
      * Geographical features related to the event in GeoJSON format
      * @return True if the 'features' field has been set, false otherwise.
      */
    public boolean hasFeatures() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'features' field.
      * Geographical features related to the event in GeoJSON format
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.GeoExtension.Builder clearFeatures() {
      features = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GeoExtension build() {
      try {
        GeoExtension record = new GeoExtension();
        if (pointBuilder != null) {
          record.point = this.pointBuilder.build();
        } else {
          record.point = fieldSetFlags()[0] ? this.point : (com.inditex.aqsw.pipe.v1.extensions.GeoPoint) defaultValue(fields()[0]);
        }
        record.features = fieldSetFlags()[1] ? this.features : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GeoExtension>
    WRITER$ = (org.apache.avro.io.DatumWriter<GeoExtension>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GeoExtension>
    READER$ = (org.apache.avro.io.DatumReader<GeoExtension>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
