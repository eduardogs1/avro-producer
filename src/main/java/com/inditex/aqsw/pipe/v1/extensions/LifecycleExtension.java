/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.aqsw.pipe.v1.extensions;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Information about the transition represented by the event in the life cycle of a process model or artifact */
@org.apache.avro.specific.AvroGenerated
public class LifecycleExtension extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6395531803790973022L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LifecycleExtension\",\"namespace\":\"com.inditex.aqsw.pipe.v1.extensions\",\"doc\":\"Information about the transition represented by the event in the life cycle of a process model or artifact\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Process model or artifact related to the event\"},{\"name\":\"domain\",\"type\":[\"null\",\"string\"],\"doc\":\"Domain of the process model or artifact related to the event\",\"default\":null},{\"name\":\"instance\",\"type\":[\"null\",\"string\"],\"doc\":\"Specific instance of the process model or artifact, if it's known\",\"default\":null},{\"name\":\"correlation\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"Correlation identifiers between states of a flow. They will be defined for each functional case with the Data Architecture Analytics team.\",\"default\":null},{\"name\":\"transition\",\"type\":[\"null\",\"string\"],\"doc\":\"Lifecycle transition represented by the event\",\"default\":null},{\"name\":\"state\",\"type\":[\"null\",\"string\"],\"doc\":\"Specifies the state reached within the process model or the artifact lifecycle that triggered the event\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LifecycleExtension> ENCODER =
      new BinaryMessageEncoder<LifecycleExtension>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LifecycleExtension> DECODER =
      new BinaryMessageDecoder<LifecycleExtension>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<LifecycleExtension> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<LifecycleExtension> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LifecycleExtension>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this LifecycleExtension to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a LifecycleExtension from a ByteBuffer. */
  public static LifecycleExtension fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Process model or artifact related to the event */
  @Deprecated public java.lang.CharSequence name;
  /** Domain of the process model or artifact related to the event */
  @Deprecated public java.lang.CharSequence domain;
  /** Specific instance of the process model or artifact, if it's known */
  @Deprecated public java.lang.CharSequence instance;
  /** Correlation identifiers between states of a flow. They will be defined for each functional case with the Data Architecture Analytics team. */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> correlation;
  /** Lifecycle transition represented by the event */
  @Deprecated public java.lang.CharSequence transition;
  /** Specifies the state reached within the process model or the artifact lifecycle that triggered the event */
  @Deprecated public java.lang.CharSequence state;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LifecycleExtension() {}

  /**
   * All-args constructor.
   * @param name Process model or artifact related to the event
   * @param domain Domain of the process model or artifact related to the event
   * @param instance Specific instance of the process model or artifact, if it's known
   * @param correlation Correlation identifiers between states of a flow. They will be defined for each functional case with the Data Architecture Analytics team.
   * @param transition Lifecycle transition represented by the event
   * @param state Specifies the state reached within the process model or the artifact lifecycle that triggered the event
   */
  public LifecycleExtension(java.lang.CharSequence name, java.lang.CharSequence domain, java.lang.CharSequence instance, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> correlation, java.lang.CharSequence transition, java.lang.CharSequence state) {
    this.name = name;
    this.domain = domain;
    this.instance = instance;
    this.correlation = correlation;
    this.transition = transition;
    this.state = state;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return domain;
    case 2: return instance;
    case 3: return correlation;
    case 4: return transition;
    case 5: return state;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: domain = (java.lang.CharSequence)value$; break;
    case 2: instance = (java.lang.CharSequence)value$; break;
    case 3: correlation = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 4: transition = (java.lang.CharSequence)value$; break;
    case 5: state = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return Process model or artifact related to the event
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Process model or artifact related to the event
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'domain' field.
   * @return Domain of the process model or artifact related to the event
   */
  public java.lang.CharSequence getDomain() {
    return domain;
  }

  /**
   * Sets the value of the 'domain' field.
   * Domain of the process model or artifact related to the event
   * @param value the value to set.
   */
  public void setDomain(java.lang.CharSequence value) {
    this.domain = value;
  }

  /**
   * Gets the value of the 'instance' field.
   * @return Specific instance of the process model or artifact, if it's known
   */
  public java.lang.CharSequence getInstance() {
    return instance;
  }

  /**
   * Sets the value of the 'instance' field.
   * Specific instance of the process model or artifact, if it's known
   * @param value the value to set.
   */
  public void setInstance(java.lang.CharSequence value) {
    this.instance = value;
  }

  /**
   * Gets the value of the 'correlation' field.
   * @return Correlation identifiers between states of a flow. They will be defined for each functional case with the Data Architecture Analytics team.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getCorrelation() {
    return correlation;
  }

  /**
   * Sets the value of the 'correlation' field.
   * Correlation identifiers between states of a flow. They will be defined for each functional case with the Data Architecture Analytics team.
   * @param value the value to set.
   */
  public void setCorrelation(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.correlation = value;
  }

  /**
   * Gets the value of the 'transition' field.
   * @return Lifecycle transition represented by the event
   */
  public java.lang.CharSequence getTransition() {
    return transition;
  }

  /**
   * Sets the value of the 'transition' field.
   * Lifecycle transition represented by the event
   * @param value the value to set.
   */
  public void setTransition(java.lang.CharSequence value) {
    this.transition = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return Specifies the state reached within the process model or the artifact lifecycle that triggered the event
   */
  public java.lang.CharSequence getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * Specifies the state reached within the process model or the artifact lifecycle that triggered the event
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Creates a new LifecycleExtension RecordBuilder.
   * @return A new LifecycleExtension RecordBuilder
   */
  public static com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder newBuilder() {
    return new com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder();
  }

  /**
   * Creates a new LifecycleExtension RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LifecycleExtension RecordBuilder
   */
  public static com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder newBuilder(com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder other) {
    return new com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder(other);
  }

  /**
   * Creates a new LifecycleExtension RecordBuilder by copying an existing LifecycleExtension instance.
   * @param other The existing instance to copy.
   * @return A new LifecycleExtension RecordBuilder
   */
  public static com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder newBuilder(com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension other) {
    return new com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder(other);
  }

  /**
   * RecordBuilder for LifecycleExtension instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LifecycleExtension>
    implements org.apache.avro.data.RecordBuilder<LifecycleExtension> {

    /** Process model or artifact related to the event */
    private java.lang.CharSequence name;
    /** Domain of the process model or artifact related to the event */
    private java.lang.CharSequence domain;
    /** Specific instance of the process model or artifact, if it's known */
    private java.lang.CharSequence instance;
    /** Correlation identifiers between states of a flow. They will be defined for each functional case with the Data Architecture Analytics team. */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> correlation;
    /** Lifecycle transition represented by the event */
    private java.lang.CharSequence transition;
    /** Specifies the state reached within the process model or the artifact lifecycle that triggered the event */
    private java.lang.CharSequence state;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.domain)) {
        this.domain = data().deepCopy(fields()[1].schema(), other.domain);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.instance)) {
        this.instance = data().deepCopy(fields()[2].schema(), other.instance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.correlation)) {
        this.correlation = data().deepCopy(fields()[3].schema(), other.correlation);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transition)) {
        this.transition = data().deepCopy(fields()[4].schema(), other.transition);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.state)) {
        this.state = data().deepCopy(fields()[5].schema(), other.state);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LifecycleExtension instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.domain)) {
        this.domain = data().deepCopy(fields()[1].schema(), other.domain);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.instance)) {
        this.instance = data().deepCopy(fields()[2].schema(), other.instance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.correlation)) {
        this.correlation = data().deepCopy(fields()[3].schema(), other.correlation);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transition)) {
        this.transition = data().deepCopy(fields()[4].schema(), other.transition);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.state)) {
        this.state = data().deepCopy(fields()[5].schema(), other.state);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * Process model or artifact related to the event
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Process model or artifact related to the event
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Process model or artifact related to the event
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * Process model or artifact related to the event
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'domain' field.
      * Domain of the process model or artifact related to the event
      * @return The value.
      */
    public java.lang.CharSequence getDomain() {
      return domain;
    }

    /**
      * Sets the value of the 'domain' field.
      * Domain of the process model or artifact related to the event
      * @param value The value of 'domain'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder setDomain(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.domain = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'domain' field has been set.
      * Domain of the process model or artifact related to the event
      * @return True if the 'domain' field has been set, false otherwise.
      */
    public boolean hasDomain() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'domain' field.
      * Domain of the process model or artifact related to the event
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder clearDomain() {
      domain = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'instance' field.
      * Specific instance of the process model or artifact, if it's known
      * @return The value.
      */
    public java.lang.CharSequence getInstance() {
      return instance;
    }

    /**
      * Sets the value of the 'instance' field.
      * Specific instance of the process model or artifact, if it's known
      * @param value The value of 'instance'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder setInstance(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.instance = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'instance' field has been set.
      * Specific instance of the process model or artifact, if it's known
      * @return True if the 'instance' field has been set, false otherwise.
      */
    public boolean hasInstance() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'instance' field.
      * Specific instance of the process model or artifact, if it's known
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder clearInstance() {
      instance = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'correlation' field.
      * Correlation identifiers between states of a flow. They will be defined for each functional case with the Data Architecture Analytics team.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getCorrelation() {
      return correlation;
    }

    /**
      * Sets the value of the 'correlation' field.
      * Correlation identifiers between states of a flow. They will be defined for each functional case with the Data Architecture Analytics team.
      * @param value The value of 'correlation'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder setCorrelation(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.correlation = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'correlation' field has been set.
      * Correlation identifiers between states of a flow. They will be defined for each functional case with the Data Architecture Analytics team.
      * @return True if the 'correlation' field has been set, false otherwise.
      */
    public boolean hasCorrelation() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'correlation' field.
      * Correlation identifiers between states of a flow. They will be defined for each functional case with the Data Architecture Analytics team.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder clearCorrelation() {
      correlation = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'transition' field.
      * Lifecycle transition represented by the event
      * @return The value.
      */
    public java.lang.CharSequence getTransition() {
      return transition;
    }

    /**
      * Sets the value of the 'transition' field.
      * Lifecycle transition represented by the event
      * @param value The value of 'transition'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder setTransition(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.transition = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'transition' field has been set.
      * Lifecycle transition represented by the event
      * @return True if the 'transition' field has been set, false otherwise.
      */
    public boolean hasTransition() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'transition' field.
      * Lifecycle transition represented by the event
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder clearTransition() {
      transition = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * Specifies the state reached within the process model or the artifact lifecycle that triggered the event
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * Specifies the state reached within the process model or the artifact lifecycle that triggered the event
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder setState(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.state = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * Specifies the state reached within the process model or the artifact lifecycle that triggered the event
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'state' field.
      * Specifies the state reached within the process model or the artifact lifecycle that triggered the event
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.LifecycleExtension.Builder clearState() {
      state = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LifecycleExtension build() {
      try {
        LifecycleExtension record = new LifecycleExtension();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.domain = fieldSetFlags()[1] ? this.domain : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.instance = fieldSetFlags()[2] ? this.instance : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.correlation = fieldSetFlags()[3] ? this.correlation : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[3]);
        record.transition = fieldSetFlags()[4] ? this.transition : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.state = fieldSetFlags()[5] ? this.state : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LifecycleExtension>
    WRITER$ = (org.apache.avro.io.DatumWriter<LifecycleExtension>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LifecycleExtension>
    READER$ = (org.apache.avro.io.DatumReader<LifecycleExtension>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
