/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.aqsw.pipe.v1.extensions;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Information about geographical points in WGS84 reference system */
@org.apache.avro.specific.AvroGenerated
public class GeoPoint extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6688339112104126336L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GeoPoint\",\"namespace\":\"com.inditex.aqsw.pipe.v1.extensions\",\"doc\":\"Information about geographical points in WGS84 reference system\",\"fields\":[{\"name\":\"lon\",\"type\":\"double\",\"doc\":\"Longitude of the geopoint\"},{\"name\":\"lat\",\"type\":\"double\",\"doc\":\"Latitude of the geopoint\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GeoPoint> ENCODER =
      new BinaryMessageEncoder<GeoPoint>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GeoPoint> DECODER =
      new BinaryMessageDecoder<GeoPoint>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<GeoPoint> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<GeoPoint> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<GeoPoint>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this GeoPoint to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a GeoPoint from a ByteBuffer. */
  public static GeoPoint fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Longitude of the geopoint */
  @Deprecated public double lon;
  /** Latitude of the geopoint */
  @Deprecated public double lat;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GeoPoint() {}

  /**
   * All-args constructor.
   * @param lon Longitude of the geopoint
   * @param lat Latitude of the geopoint
   */
  public GeoPoint(java.lang.Double lon, java.lang.Double lat) {
    this.lon = lon;
    this.lat = lat;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return lon;
    case 1: return lat;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: lon = (java.lang.Double)value$; break;
    case 1: lat = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'lon' field.
   * @return Longitude of the geopoint
   */
  public java.lang.Double getLon() {
    return lon;
  }

  /**
   * Sets the value of the 'lon' field.
   * Longitude of the geopoint
   * @param value the value to set.
   */
  public void setLon(java.lang.Double value) {
    this.lon = value;
  }

  /**
   * Gets the value of the 'lat' field.
   * @return Latitude of the geopoint
   */
  public java.lang.Double getLat() {
    return lat;
  }

  /**
   * Sets the value of the 'lat' field.
   * Latitude of the geopoint
   * @param value the value to set.
   */
  public void setLat(java.lang.Double value) {
    this.lat = value;
  }

  /**
   * Creates a new GeoPoint RecordBuilder.
   * @return A new GeoPoint RecordBuilder
   */
  public static com.inditex.aqsw.pipe.v1.extensions.GeoPoint.Builder newBuilder() {
    return new com.inditex.aqsw.pipe.v1.extensions.GeoPoint.Builder();
  }

  /**
   * Creates a new GeoPoint RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GeoPoint RecordBuilder
   */
  public static com.inditex.aqsw.pipe.v1.extensions.GeoPoint.Builder newBuilder(com.inditex.aqsw.pipe.v1.extensions.GeoPoint.Builder other) {
    return new com.inditex.aqsw.pipe.v1.extensions.GeoPoint.Builder(other);
  }

  /**
   * Creates a new GeoPoint RecordBuilder by copying an existing GeoPoint instance.
   * @param other The existing instance to copy.
   * @return A new GeoPoint RecordBuilder
   */
  public static com.inditex.aqsw.pipe.v1.extensions.GeoPoint.Builder newBuilder(com.inditex.aqsw.pipe.v1.extensions.GeoPoint other) {
    return new com.inditex.aqsw.pipe.v1.extensions.GeoPoint.Builder(other);
  }

  /**
   * RecordBuilder for GeoPoint instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GeoPoint>
    implements org.apache.avro.data.RecordBuilder<GeoPoint> {

    /** Longitude of the geopoint */
    private double lon;
    /** Latitude of the geopoint */
    private double lat;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.aqsw.pipe.v1.extensions.GeoPoint.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.lon)) {
        this.lon = data().deepCopy(fields()[0].schema(), other.lon);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lat)) {
        this.lat = data().deepCopy(fields()[1].schema(), other.lat);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing GeoPoint instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.aqsw.pipe.v1.extensions.GeoPoint other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.lon)) {
        this.lon = data().deepCopy(fields()[0].schema(), other.lon);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lat)) {
        this.lat = data().deepCopy(fields()[1].schema(), other.lat);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'lon' field.
      * Longitude of the geopoint
      * @return The value.
      */
    public java.lang.Double getLon() {
      return lon;
    }

    /**
      * Sets the value of the 'lon' field.
      * Longitude of the geopoint
      * @param value The value of 'lon'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.GeoPoint.Builder setLon(double value) {
      validate(fields()[0], value);
      this.lon = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'lon' field has been set.
      * Longitude of the geopoint
      * @return True if the 'lon' field has been set, false otherwise.
      */
    public boolean hasLon() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'lon' field.
      * Longitude of the geopoint
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.GeoPoint.Builder clearLon() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lat' field.
      * Latitude of the geopoint
      * @return The value.
      */
    public java.lang.Double getLat() {
      return lat;
    }

    /**
      * Sets the value of the 'lat' field.
      * Latitude of the geopoint
      * @param value The value of 'lat'.
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.GeoPoint.Builder setLat(double value) {
      validate(fields()[1], value);
      this.lat = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lat' field has been set.
      * Latitude of the geopoint
      * @return True if the 'lat' field has been set, false otherwise.
      */
    public boolean hasLat() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lat' field.
      * Latitude of the geopoint
      * @return This builder.
      */
    public com.inditex.aqsw.pipe.v1.extensions.GeoPoint.Builder clearLat() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GeoPoint build() {
      try {
        GeoPoint record = new GeoPoint();
        record.lon = fieldSetFlags()[0] ? this.lon : (java.lang.Double) defaultValue(fields()[0]);
        record.lat = fieldSetFlags()[1] ? this.lat : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GeoPoint>
    WRITER$ = (org.apache.avro.io.DatumWriter<GeoPoint>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GeoPoint>
    READER$ = (org.apache.avro.io.DatumReader<GeoPoint>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
