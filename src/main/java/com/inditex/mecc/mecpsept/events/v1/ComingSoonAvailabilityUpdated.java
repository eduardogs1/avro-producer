/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.mecpsept.events.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ComingSoonAvailabilityUpdated extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2366173068103217020L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ComingSoonAvailabilityUpdated\",\"namespace\":\"com.inditex.mecc.mecpsept.events.v1\",\"fields\":[{\"name\":\"storeId\",\"type\":\"int\",\"doc\":\"The identifier of the store\"},{\"name\":\"brandId\",\"type\":\"int\",\"doc\":\"The identifier of the brand\"},{\"name\":\"productItemReference\",\"type\":\"string\",\"doc\":\" Product item reference without season\"},{\"name\":\"updatedAt\",\"type\":\"long\",\"doc\":\" Modification date \",\"logicalType\":\"timestamp-millis\"},{\"name\":\"available\",\"type\":\"boolean\",\"doc\":\"Whether or not a sku has coming soon availability\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ComingSoonAvailabilityUpdated> ENCODER =
      new BinaryMessageEncoder<ComingSoonAvailabilityUpdated>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ComingSoonAvailabilityUpdated> DECODER =
      new BinaryMessageDecoder<ComingSoonAvailabilityUpdated>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ComingSoonAvailabilityUpdated> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ComingSoonAvailabilityUpdated> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ComingSoonAvailabilityUpdated> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ComingSoonAvailabilityUpdated>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ComingSoonAvailabilityUpdated to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ComingSoonAvailabilityUpdated from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ComingSoonAvailabilityUpdated instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ComingSoonAvailabilityUpdated fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The identifier of the store */
  @Deprecated public int storeId;
  /** The identifier of the brand */
  @Deprecated public int brandId;
  /**  Product item reference without season */
  @Deprecated public java.lang.CharSequence productItemReference;
  /**  Modification date  */
  @Deprecated public long updatedAt;
  /** Whether or not a sku has coming soon availability */
  @Deprecated public boolean available;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ComingSoonAvailabilityUpdated() {}

  /**
   * All-args constructor.
   * @param storeId The identifier of the store
   * @param brandId The identifier of the brand
   * @param productItemReference  Product item reference without season
   * @param updatedAt  Modification date 
   * @param available Whether or not a sku has coming soon availability
   */
  public ComingSoonAvailabilityUpdated(java.lang.Integer storeId, java.lang.Integer brandId, java.lang.CharSequence productItemReference, java.lang.Long updatedAt, java.lang.Boolean available) {
    this.storeId = storeId;
    this.brandId = brandId;
    this.productItemReference = productItemReference;
    this.updatedAt = updatedAt;
    this.available = available;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return storeId;
    case 1: return brandId;
    case 2: return productItemReference;
    case 3: return updatedAt;
    case 4: return available;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: storeId = (java.lang.Integer)value$; break;
    case 1: brandId = (java.lang.Integer)value$; break;
    case 2: productItemReference = (java.lang.CharSequence)value$; break;
    case 3: updatedAt = (java.lang.Long)value$; break;
    case 4: available = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'storeId' field.
   * @return The identifier of the store
   */
  public int getStoreId() {
    return storeId;
  }


  /**
   * Sets the value of the 'storeId' field.
   * The identifier of the store
   * @param value the value to set.
   */
  public void setStoreId(int value) {
    this.storeId = value;
  }

  /**
   * Gets the value of the 'brandId' field.
   * @return The identifier of the brand
   */
  public int getBrandId() {
    return brandId;
  }


  /**
   * Sets the value of the 'brandId' field.
   * The identifier of the brand
   * @param value the value to set.
   */
  public void setBrandId(int value) {
    this.brandId = value;
  }

  /**
   * Gets the value of the 'productItemReference' field.
   * @return  Product item reference without season
   */
  public java.lang.CharSequence getProductItemReference() {
    return productItemReference;
  }


  /**
   * Sets the value of the 'productItemReference' field.
   *  Product item reference without season
   * @param value the value to set.
   */
  public void setProductItemReference(java.lang.CharSequence value) {
    this.productItemReference = value;
  }

  /**
   * Gets the value of the 'updatedAt' field.
   * @return  Modification date 
   */
  public long getUpdatedAt() {
    return updatedAt;
  }


  /**
   * Sets the value of the 'updatedAt' field.
   *  Modification date 
   * @param value the value to set.
   */
  public void setUpdatedAt(long value) {
    this.updatedAt = value;
  }

  /**
   * Gets the value of the 'available' field.
   * @return Whether or not a sku has coming soon availability
   */
  public boolean getAvailable() {
    return available;
  }


  /**
   * Sets the value of the 'available' field.
   * Whether or not a sku has coming soon availability
   * @param value the value to set.
   */
  public void setAvailable(boolean value) {
    this.available = value;
  }

  /**
   * Creates a new ComingSoonAvailabilityUpdated RecordBuilder.
   * @return A new ComingSoonAvailabilityUpdated RecordBuilder
   */
  public static com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder newBuilder() {
    return new com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder();
  }

  /**
   * Creates a new ComingSoonAvailabilityUpdated RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ComingSoonAvailabilityUpdated RecordBuilder
   */
  public static com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder newBuilder(com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder other) {
    if (other == null) {
      return new com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder();
    } else {
      return new com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder(other);
    }
  }

  /**
   * Creates a new ComingSoonAvailabilityUpdated RecordBuilder by copying an existing ComingSoonAvailabilityUpdated instance.
   * @param other The existing instance to copy.
   * @return A new ComingSoonAvailabilityUpdated RecordBuilder
   */
  public static com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder newBuilder(com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated other) {
    if (other == null) {
      return new com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder();
    } else {
      return new com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder(other);
    }
  }

  /**
   * RecordBuilder for ComingSoonAvailabilityUpdated instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ComingSoonAvailabilityUpdated>
    implements org.apache.avro.data.RecordBuilder<ComingSoonAvailabilityUpdated> {

    /** The identifier of the store */
    private int storeId;
    /** The identifier of the brand */
    private int brandId;
    /**  Product item reference without season */
    private java.lang.CharSequence productItemReference;
    /**  Modification date  */
    private long updatedAt;
    /** Whether or not a sku has coming soon availability */
    private boolean available;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.storeId)) {
        this.storeId = data().deepCopy(fields()[0].schema(), other.storeId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.brandId)) {
        this.brandId = data().deepCopy(fields()[1].schema(), other.brandId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.productItemReference)) {
        this.productItemReference = data().deepCopy(fields()[2].schema(), other.productItemReference);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[3].schema(), other.updatedAt);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.available)) {
        this.available = data().deepCopy(fields()[4].schema(), other.available);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ComingSoonAvailabilityUpdated instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.storeId)) {
        this.storeId = data().deepCopy(fields()[0].schema(), other.storeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.brandId)) {
        this.brandId = data().deepCopy(fields()[1].schema(), other.brandId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.productItemReference)) {
        this.productItemReference = data().deepCopy(fields()[2].schema(), other.productItemReference);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[3].schema(), other.updatedAt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.available)) {
        this.available = data().deepCopy(fields()[4].schema(), other.available);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'storeId' field.
      * The identifier of the store
      * @return The value.
      */
    public int getStoreId() {
      return storeId;
    }


    /**
      * Sets the value of the 'storeId' field.
      * The identifier of the store
      * @param value The value of 'storeId'.
      * @return This builder.
      */
    public com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder setStoreId(int value) {
      validate(fields()[0], value);
      this.storeId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'storeId' field has been set.
      * The identifier of the store
      * @return True if the 'storeId' field has been set, false otherwise.
      */
    public boolean hasStoreId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'storeId' field.
      * The identifier of the store
      * @return This builder.
      */
    public com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder clearStoreId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'brandId' field.
      * The identifier of the brand
      * @return The value.
      */
    public int getBrandId() {
      return brandId;
    }


    /**
      * Sets the value of the 'brandId' field.
      * The identifier of the brand
      * @param value The value of 'brandId'.
      * @return This builder.
      */
    public com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder setBrandId(int value) {
      validate(fields()[1], value);
      this.brandId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'brandId' field has been set.
      * The identifier of the brand
      * @return True if the 'brandId' field has been set, false otherwise.
      */
    public boolean hasBrandId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'brandId' field.
      * The identifier of the brand
      * @return This builder.
      */
    public com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder clearBrandId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'productItemReference' field.
      *  Product item reference without season
      * @return The value.
      */
    public java.lang.CharSequence getProductItemReference() {
      return productItemReference;
    }


    /**
      * Sets the value of the 'productItemReference' field.
      *  Product item reference without season
      * @param value The value of 'productItemReference'.
      * @return This builder.
      */
    public com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder setProductItemReference(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.productItemReference = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'productItemReference' field has been set.
      *  Product item reference without season
      * @return True if the 'productItemReference' field has been set, false otherwise.
      */
    public boolean hasProductItemReference() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'productItemReference' field.
      *  Product item reference without season
      * @return This builder.
      */
    public com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder clearProductItemReference() {
      productItemReference = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      *  Modification date 
      * @return The value.
      */
    public long getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      *  Modification date 
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder setUpdatedAt(long value) {
      validate(fields()[3], value);
      this.updatedAt = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      *  Modification date 
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      *  Modification date 
      * @return This builder.
      */
    public com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder clearUpdatedAt() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'available' field.
      * Whether or not a sku has coming soon availability
      * @return The value.
      */
    public boolean getAvailable() {
      return available;
    }


    /**
      * Sets the value of the 'available' field.
      * Whether or not a sku has coming soon availability
      * @param value The value of 'available'.
      * @return This builder.
      */
    public com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder setAvailable(boolean value) {
      validate(fields()[4], value);
      this.available = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'available' field has been set.
      * Whether or not a sku has coming soon availability
      * @return True if the 'available' field has been set, false otherwise.
      */
    public boolean hasAvailable() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'available' field.
      * Whether or not a sku has coming soon availability
      * @return This builder.
      */
    public com.inditex.mecc.mecpsept.events.v1.ComingSoonAvailabilityUpdated.Builder clearAvailable() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ComingSoonAvailabilityUpdated build() {
      try {
        ComingSoonAvailabilityUpdated record = new ComingSoonAvailabilityUpdated();
        record.storeId = fieldSetFlags()[0] ? this.storeId : (java.lang.Integer) defaultValue(fields()[0]);
        record.brandId = fieldSetFlags()[1] ? this.brandId : (java.lang.Integer) defaultValue(fields()[1]);
        record.productItemReference = fieldSetFlags()[2] ? this.productItemReference : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.updatedAt = fieldSetFlags()[3] ? this.updatedAt : (java.lang.Long) defaultValue(fields()[3]);
        record.available = fieldSetFlags()[4] ? this.available : (java.lang.Boolean) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ComingSoonAvailabilityUpdated>
    WRITER$ = (org.apache.avro.io.DatumWriter<ComingSoonAvailabilityUpdated>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ComingSoonAvailabilityUpdated>
    READER$ = (org.apache.avro.io.DatumReader<ComingSoonAvailabilityUpdated>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.storeId);

    out.writeInt(this.brandId);

    out.writeString(this.productItemReference);

    out.writeLong(this.updatedAt);

    out.writeBoolean(this.available);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.storeId = in.readInt();

      this.brandId = in.readInt();

      this.productItemReference = in.readString(this.productItemReference instanceof Utf8 ? (Utf8)this.productItemReference : null);

      this.updatedAt = in.readLong();

      this.available = in.readBoolean();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.storeId = in.readInt();
          break;

        case 1:
          this.brandId = in.readInt();
          break;

        case 2:
          this.productItemReference = in.readString(this.productItemReference instanceof Utf8 ? (Utf8)this.productItemReference : null);
          break;

        case 3:
          this.updatedAt = in.readLong();
          break;

        case 4:
          this.available = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










