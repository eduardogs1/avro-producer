/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.ecomloadbk.api.avro.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Class that holds the twinned type */
@org.apache.avro.specific.AvroGenerated
public class TwinnedInfoType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1218859606428720478L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TwinnedInfoType\",\"namespace\":\"com.inditex.mecc.ecomloadbk.api.avro.v1\",\"doc\":\"Class that holds the twinned type\",\"fields\":[{\"name\":\"kind\",\"type\":{\"type\":\"enum\",\"name\":\"KindEnum\",\"symbols\":[\"COM\",\"COMERCIAL\",\"DISTRIBUCION\",\"OTHER\"]},\"doc\":\"Type of twinned\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TwinnedInfoType> ENCODER =
      new BinaryMessageEncoder<TwinnedInfoType>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TwinnedInfoType> DECODER =
      new BinaryMessageDecoder<TwinnedInfoType>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TwinnedInfoType> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TwinnedInfoType> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TwinnedInfoType> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TwinnedInfoType>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TwinnedInfoType to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TwinnedInfoType from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TwinnedInfoType instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TwinnedInfoType fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Type of twinned */
  @Deprecated public com.inditex.mecc.ecomloadbk.api.avro.v1.KindEnum kind;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TwinnedInfoType() {}

  /**
   * All-args constructor.
   * @param kind Type of twinned
   */
  public TwinnedInfoType(com.inditex.mecc.ecomloadbk.api.avro.v1.KindEnum kind) {
    this.kind = kind;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return kind;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: kind = (com.inditex.mecc.ecomloadbk.api.avro.v1.KindEnum)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'kind' field.
   * @return Type of twinned
   */
  public com.inditex.mecc.ecomloadbk.api.avro.v1.KindEnum getKind() {
    return kind;
  }


  /**
   * Sets the value of the 'kind' field.
   * Type of twinned
   * @param value the value to set.
   */
  public void setKind(com.inditex.mecc.ecomloadbk.api.avro.v1.KindEnum value) {
    this.kind = value;
  }

  /**
   * Creates a new TwinnedInfoType RecordBuilder.
   * @return A new TwinnedInfoType RecordBuilder
   */
  public static com.inditex.mecc.ecomloadbk.api.avro.v1.TwinnedInfoType.Builder newBuilder() {
    return new com.inditex.mecc.ecomloadbk.api.avro.v1.TwinnedInfoType.Builder();
  }

  /**
   * Creates a new TwinnedInfoType RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TwinnedInfoType RecordBuilder
   */
  public static com.inditex.mecc.ecomloadbk.api.avro.v1.TwinnedInfoType.Builder newBuilder(com.inditex.mecc.ecomloadbk.api.avro.v1.TwinnedInfoType.Builder other) {
    if (other == null) {
      return new com.inditex.mecc.ecomloadbk.api.avro.v1.TwinnedInfoType.Builder();
    } else {
      return new com.inditex.mecc.ecomloadbk.api.avro.v1.TwinnedInfoType.Builder(other);
    }
  }

  /**
   * Creates a new TwinnedInfoType RecordBuilder by copying an existing TwinnedInfoType instance.
   * @param other The existing instance to copy.
   * @return A new TwinnedInfoType RecordBuilder
   */
  public static com.inditex.mecc.ecomloadbk.api.avro.v1.TwinnedInfoType.Builder newBuilder(com.inditex.mecc.ecomloadbk.api.avro.v1.TwinnedInfoType other) {
    if (other == null) {
      return new com.inditex.mecc.ecomloadbk.api.avro.v1.TwinnedInfoType.Builder();
    } else {
      return new com.inditex.mecc.ecomloadbk.api.avro.v1.TwinnedInfoType.Builder(other);
    }
  }

  /**
   * RecordBuilder for TwinnedInfoType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TwinnedInfoType>
    implements org.apache.avro.data.RecordBuilder<TwinnedInfoType> {

    /** Type of twinned */
    private com.inditex.mecc.ecomloadbk.api.avro.v1.KindEnum kind;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.ecomloadbk.api.avro.v1.TwinnedInfoType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.kind)) {
        this.kind = data().deepCopy(fields()[0].schema(), other.kind);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing TwinnedInfoType instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.ecomloadbk.api.avro.v1.TwinnedInfoType other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.kind)) {
        this.kind = data().deepCopy(fields()[0].schema(), other.kind);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'kind' field.
      * Type of twinned
      * @return The value.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.KindEnum getKind() {
      return kind;
    }


    /**
      * Sets the value of the 'kind' field.
      * Type of twinned
      * @param value The value of 'kind'.
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.TwinnedInfoType.Builder setKind(com.inditex.mecc.ecomloadbk.api.avro.v1.KindEnum value) {
      validate(fields()[0], value);
      this.kind = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'kind' field has been set.
      * Type of twinned
      * @return True if the 'kind' field has been set, false otherwise.
      */
    public boolean hasKind() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'kind' field.
      * Type of twinned
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.TwinnedInfoType.Builder clearKind() {
      kind = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TwinnedInfoType build() {
      try {
        TwinnedInfoType record = new TwinnedInfoType();
        record.kind = fieldSetFlags()[0] ? this.kind : (com.inditex.mecc.ecomloadbk.api.avro.v1.KindEnum) defaultValue(fields()[0]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TwinnedInfoType>
    WRITER$ = (org.apache.avro.io.DatumWriter<TwinnedInfoType>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TwinnedInfoType>
    READER$ = (org.apache.avro.io.DatumReader<TwinnedInfoType>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.kind.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.kind = com.inditex.mecc.ecomloadbk.api.avro.v1.KindEnum.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 1; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.kind = com.inditex.mecc.ecomloadbk.api.avro.v1.KindEnum.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










