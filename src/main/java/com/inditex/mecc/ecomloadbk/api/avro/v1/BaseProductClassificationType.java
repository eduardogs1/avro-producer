/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.ecomloadbk.api.avro.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Class that holds availability changes in a base product component. */
@org.apache.avro.specific.AvroGenerated
public class BaseProductClassificationType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3750251457480793942L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BaseProductClassificationType\",\"namespace\":\"com.inditex.mecc.ecomloadbk.api.avro.v1\",\"doc\":\"Class that holds availability changes in a base product component.\",\"fields\":[{\"name\":\"family_id\",\"type\":\"int\",\"doc\":\"family id from master db\"},{\"name\":\"sub_family_id\",\"type\":\"int\",\"doc\":\"subfamily id from master db\"},{\"name\":\"section_type_id\",\"type\":\"int\",\"doc\":\"Secction id that represents Woman, man, kids.\"},{\"name\":\"sub_section_id\",\"type\":\"int\",\"doc\":\"subSecction id that represents Trf, classic...\"},{\"name\":\"size_system_id\",\"type\":\"int\",\"doc\":\"Size sistem of the product\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BaseProductClassificationType> ENCODER =
      new BinaryMessageEncoder<BaseProductClassificationType>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BaseProductClassificationType> DECODER =
      new BinaryMessageDecoder<BaseProductClassificationType>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BaseProductClassificationType> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BaseProductClassificationType> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BaseProductClassificationType> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BaseProductClassificationType>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BaseProductClassificationType to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BaseProductClassificationType from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BaseProductClassificationType instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BaseProductClassificationType fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** family id from master db */
  @Deprecated public int family_id;
  /** subfamily id from master db */
  @Deprecated public int sub_family_id;
  /** Secction id that represents Woman, man, kids. */
  @Deprecated public int section_type_id;
  /** subSecction id that represents Trf, classic... */
  @Deprecated public int sub_section_id;
  /** Size sistem of the product */
  @Deprecated public int size_system_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BaseProductClassificationType() {}

  /**
   * All-args constructor.
   * @param family_id family id from master db
   * @param sub_family_id subfamily id from master db
   * @param section_type_id Secction id that represents Woman, man, kids.
   * @param sub_section_id subSecction id that represents Trf, classic...
   * @param size_system_id Size sistem of the product
   */
  public BaseProductClassificationType(java.lang.Integer family_id, java.lang.Integer sub_family_id, java.lang.Integer section_type_id, java.lang.Integer sub_section_id, java.lang.Integer size_system_id) {
    this.family_id = family_id;
    this.sub_family_id = sub_family_id;
    this.section_type_id = section_type_id;
    this.sub_section_id = sub_section_id;
    this.size_system_id = size_system_id;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return family_id;
    case 1: return sub_family_id;
    case 2: return section_type_id;
    case 3: return sub_section_id;
    case 4: return size_system_id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: family_id = (java.lang.Integer)value$; break;
    case 1: sub_family_id = (java.lang.Integer)value$; break;
    case 2: section_type_id = (java.lang.Integer)value$; break;
    case 3: sub_section_id = (java.lang.Integer)value$; break;
    case 4: size_system_id = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'family_id' field.
   * @return family id from master db
   */
  public int getFamilyId() {
    return family_id;
  }


  /**
   * Sets the value of the 'family_id' field.
   * family id from master db
   * @param value the value to set.
   */
  public void setFamilyId(int value) {
    this.family_id = value;
  }

  /**
   * Gets the value of the 'sub_family_id' field.
   * @return subfamily id from master db
   */
  public int getSubFamilyId() {
    return sub_family_id;
  }


  /**
   * Sets the value of the 'sub_family_id' field.
   * subfamily id from master db
   * @param value the value to set.
   */
  public void setSubFamilyId(int value) {
    this.sub_family_id = value;
  }

  /**
   * Gets the value of the 'section_type_id' field.
   * @return Secction id that represents Woman, man, kids.
   */
  public int getSectionTypeId() {
    return section_type_id;
  }


  /**
   * Sets the value of the 'section_type_id' field.
   * Secction id that represents Woman, man, kids.
   * @param value the value to set.
   */
  public void setSectionTypeId(int value) {
    this.section_type_id = value;
  }

  /**
   * Gets the value of the 'sub_section_id' field.
   * @return subSecction id that represents Trf, classic...
   */
  public int getSubSectionId() {
    return sub_section_id;
  }


  /**
   * Sets the value of the 'sub_section_id' field.
   * subSecction id that represents Trf, classic...
   * @param value the value to set.
   */
  public void setSubSectionId(int value) {
    this.sub_section_id = value;
  }

  /**
   * Gets the value of the 'size_system_id' field.
   * @return Size sistem of the product
   */
  public int getSizeSystemId() {
    return size_system_id;
  }


  /**
   * Sets the value of the 'size_system_id' field.
   * Size sistem of the product
   * @param value the value to set.
   */
  public void setSizeSystemId(int value) {
    this.size_system_id = value;
  }

  /**
   * Creates a new BaseProductClassificationType RecordBuilder.
   * @return A new BaseProductClassificationType RecordBuilder
   */
  public static com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder newBuilder() {
    return new com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder();
  }

  /**
   * Creates a new BaseProductClassificationType RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BaseProductClassificationType RecordBuilder
   */
  public static com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder newBuilder(com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder other) {
    if (other == null) {
      return new com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder();
    } else {
      return new com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder(other);
    }
  }

  /**
   * Creates a new BaseProductClassificationType RecordBuilder by copying an existing BaseProductClassificationType instance.
   * @param other The existing instance to copy.
   * @return A new BaseProductClassificationType RecordBuilder
   */
  public static com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder newBuilder(com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType other) {
    if (other == null) {
      return new com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder();
    } else {
      return new com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder(other);
    }
  }

  /**
   * RecordBuilder for BaseProductClassificationType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BaseProductClassificationType>
    implements org.apache.avro.data.RecordBuilder<BaseProductClassificationType> {

    /** family id from master db */
    private int family_id;
    /** subfamily id from master db */
    private int sub_family_id;
    /** Secction id that represents Woman, man, kids. */
    private int section_type_id;
    /** subSecction id that represents Trf, classic... */
    private int sub_section_id;
    /** Size sistem of the product */
    private int size_system_id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.family_id)) {
        this.family_id = data().deepCopy(fields()[0].schema(), other.family_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sub_family_id)) {
        this.sub_family_id = data().deepCopy(fields()[1].schema(), other.sub_family_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.section_type_id)) {
        this.section_type_id = data().deepCopy(fields()[2].schema(), other.section_type_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.sub_section_id)) {
        this.sub_section_id = data().deepCopy(fields()[3].schema(), other.sub_section_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.size_system_id)) {
        this.size_system_id = data().deepCopy(fields()[4].schema(), other.size_system_id);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing BaseProductClassificationType instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.family_id)) {
        this.family_id = data().deepCopy(fields()[0].schema(), other.family_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sub_family_id)) {
        this.sub_family_id = data().deepCopy(fields()[1].schema(), other.sub_family_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.section_type_id)) {
        this.section_type_id = data().deepCopy(fields()[2].schema(), other.section_type_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sub_section_id)) {
        this.sub_section_id = data().deepCopy(fields()[3].schema(), other.sub_section_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.size_system_id)) {
        this.size_system_id = data().deepCopy(fields()[4].schema(), other.size_system_id);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'family_id' field.
      * family id from master db
      * @return The value.
      */
    public int getFamilyId() {
      return family_id;
    }


    /**
      * Sets the value of the 'family_id' field.
      * family id from master db
      * @param value The value of 'family_id'.
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder setFamilyId(int value) {
      validate(fields()[0], value);
      this.family_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'family_id' field has been set.
      * family id from master db
      * @return True if the 'family_id' field has been set, false otherwise.
      */
    public boolean hasFamilyId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'family_id' field.
      * family id from master db
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder clearFamilyId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sub_family_id' field.
      * subfamily id from master db
      * @return The value.
      */
    public int getSubFamilyId() {
      return sub_family_id;
    }


    /**
      * Sets the value of the 'sub_family_id' field.
      * subfamily id from master db
      * @param value The value of 'sub_family_id'.
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder setSubFamilyId(int value) {
      validate(fields()[1], value);
      this.sub_family_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sub_family_id' field has been set.
      * subfamily id from master db
      * @return True if the 'sub_family_id' field has been set, false otherwise.
      */
    public boolean hasSubFamilyId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sub_family_id' field.
      * subfamily id from master db
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder clearSubFamilyId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'section_type_id' field.
      * Secction id that represents Woman, man, kids.
      * @return The value.
      */
    public int getSectionTypeId() {
      return section_type_id;
    }


    /**
      * Sets the value of the 'section_type_id' field.
      * Secction id that represents Woman, man, kids.
      * @param value The value of 'section_type_id'.
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder setSectionTypeId(int value) {
      validate(fields()[2], value);
      this.section_type_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'section_type_id' field has been set.
      * Secction id that represents Woman, man, kids.
      * @return True if the 'section_type_id' field has been set, false otherwise.
      */
    public boolean hasSectionTypeId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'section_type_id' field.
      * Secction id that represents Woman, man, kids.
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder clearSectionTypeId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sub_section_id' field.
      * subSecction id that represents Trf, classic...
      * @return The value.
      */
    public int getSubSectionId() {
      return sub_section_id;
    }


    /**
      * Sets the value of the 'sub_section_id' field.
      * subSecction id that represents Trf, classic...
      * @param value The value of 'sub_section_id'.
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder setSubSectionId(int value) {
      validate(fields()[3], value);
      this.sub_section_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sub_section_id' field has been set.
      * subSecction id that represents Trf, classic...
      * @return True if the 'sub_section_id' field has been set, false otherwise.
      */
    public boolean hasSubSectionId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sub_section_id' field.
      * subSecction id that represents Trf, classic...
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder clearSubSectionId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'size_system_id' field.
      * Size sistem of the product
      * @return The value.
      */
    public int getSizeSystemId() {
      return size_system_id;
    }


    /**
      * Sets the value of the 'size_system_id' field.
      * Size sistem of the product
      * @param value The value of 'size_system_id'.
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder setSizeSystemId(int value) {
      validate(fields()[4], value);
      this.size_system_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'size_system_id' field has been set.
      * Size sistem of the product
      * @return True if the 'size_system_id' field has been set, false otherwise.
      */
    public boolean hasSizeSystemId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'size_system_id' field.
      * Size sistem of the product
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductClassificationType.Builder clearSizeSystemId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BaseProductClassificationType build() {
      try {
        BaseProductClassificationType record = new BaseProductClassificationType();
        record.family_id = fieldSetFlags()[0] ? this.family_id : (java.lang.Integer) defaultValue(fields()[0]);
        record.sub_family_id = fieldSetFlags()[1] ? this.sub_family_id : (java.lang.Integer) defaultValue(fields()[1]);
        record.section_type_id = fieldSetFlags()[2] ? this.section_type_id : (java.lang.Integer) defaultValue(fields()[2]);
        record.sub_section_id = fieldSetFlags()[3] ? this.sub_section_id : (java.lang.Integer) defaultValue(fields()[3]);
        record.size_system_id = fieldSetFlags()[4] ? this.size_system_id : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BaseProductClassificationType>
    WRITER$ = (org.apache.avro.io.DatumWriter<BaseProductClassificationType>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BaseProductClassificationType>
    READER$ = (org.apache.avro.io.DatumReader<BaseProductClassificationType>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.family_id);

    out.writeInt(this.sub_family_id);

    out.writeInt(this.section_type_id);

    out.writeInt(this.sub_section_id);

    out.writeInt(this.size_system_id);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.family_id = in.readInt();

      this.sub_family_id = in.readInt();

      this.section_type_id = in.readInt();

      this.sub_section_id = in.readInt();

      this.size_system_id = in.readInt();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.family_id = in.readInt();
          break;

        case 1:
          this.sub_family_id = in.readInt();
          break;

        case 2:
          this.section_type_id = in.readInt();
          break;

        case 3:
          this.sub_section_id = in.readInt();
          break;

        case 4:
          this.size_system_id = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










