/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.ecomloadbk.api.avro.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Avro envelope that holds base product' changes. */
@org.apache.avro.specific.AvroGenerated
public class BaseProductChangeEnvelope extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2222917087460527961L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BaseProductChangeEnvelope\",\"namespace\":\"com.inditex.mecc.ecomloadbk.api.avro.v1\",\"doc\":\"Avro envelope that holds base product' changes.\",\"fields\":[{\"name\":\"metadata\",\"type\":{\"type\":\"record\",\"name\":\"Metadata\",\"namespace\":\"com.inditex.aqsw.pipe.v1\",\"doc\":\"Message context attributes\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Unique name of the entity contained in the payload. I.e. 'cart'\"},{\"name\":\"domain\",\"type\":\"string\",\"doc\":\"Functional domain of the entity contained in the payload. I.e. 'purchase'\"},{\"name\":\"version\",\"type\":\"string\",\"doc\":\"Version of the entity contained in the payload\"},{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"doc\":\"Unique identifier of the the event\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"string\",\"doc\":\"Timestamp of the occurrence of the business event\"},{\"name\":\"action\",\"type\":\"string\",\"doc\":\"Identifier of the action that generated the event. I.e. 'modified'\"},{\"name\":\"envelope\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Envelope\",\"doc\":\"Data relative to the message container used to envelop the event\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the message container used. I.e. 'pipe-event'\"},{\"name\":\"version\",\"type\":\"string\",\"doc\":\"Specific container version\"}]}],\"doc\":\"Data relative to the message container used to envelop the event\",\"default\":null},{\"name\":\"classifiers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Classifier\",\"doc\":\"Defines the identity of a message using a set of keys extracted from the message payload\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the classifier in order to make comparisons between events with the same classifier defined\"},{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"Ordered values that define the final classifier value\"}]}}],\"doc\":\"Set of classifiers to define different identities related with the event\",\"default\":null},{\"name\":\"extensions\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Extensions\",\"namespace\":\"com.inditex.aqsw.pipe.v1.extensions\",\"doc\":\"Set of attributes for attaching common information to the event with analytic purposes\",\"fields\":[{\"name\":\"flows\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LifecycleExtension\",\"doc\":\"Information about the transition represented by the event in the life cycle of a process model or artifact\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Process model or artifact related to the event\"},{\"name\":\"domain\",\"type\":[\"null\",\"string\"],\"doc\":\"Domain of the process model or artifact related to the event\",\"default\":null},{\"name\":\"instance\",\"type\":[\"null\",\"string\"],\"doc\":\"Specific instance of the process model or artifact, if it's known\",\"default\":null},{\"name\":\"correlation\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"Correlation identifiers between states of a flow. They will be defined for each functional case with the Data Architecture Analytics team.\",\"default\":null},{\"name\":\"transition\",\"type\":[\"null\",\"string\"],\"doc\":\"Lifecycle transition represented by the event\",\"default\":null},{\"name\":\"state\",\"type\":[\"null\",\"string\"],\"doc\":\"Specifies the state reached within the process model or the artifact lifecycle that triggered the event\",\"default\":null}]}}],\"doc\":\"Information about process models or artifacts the event is related to\",\"default\":null},{\"name\":\"geo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"GeoExtension\",\"doc\":\"Information about geographical points and shapes related with an event\",\"fields\":[{\"name\":\"point\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"GeoPoint\",\"doc\":\"Information about geographical points in WGS84 reference system\",\"fields\":[{\"name\":\"lon\",\"type\":\"double\",\"doc\":\"Longitude of the geopoint\"},{\"name\":\"lat\",\"type\":\"double\",\"doc\":\"Latitude of the geopoint\"}]}],\"doc\":\"Geographical point related to the event in WGS84 reference system\",\"default\":null},{\"name\":\"features\",\"type\":[\"null\",\"string\"],\"doc\":\"Geographical features related to the event in GeoJSON format\",\"default\":null}]}],\"doc\":\"Information about location related to the event\",\"default\":null}]}],\"doc\":\"Data relative to the business context that the message belongs to\",\"default\":null},{\"name\":\"relationships\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Relationship\",\"doc\":\"Represents a relationship between the message and a specific business entity\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Unique name of the entity\"},{\"name\":\"domain\",\"type\":\"string\",\"doc\":\"Functional domain. I.e. 'ECommerce'\"},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"doc\":\"Version of the entity definition\",\"default\":null},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"RelationshipType\",\"symbols\":[\"createdBy\",\"causes\",\"dependsOn\",\"hasA\",\"partOf\",\"memberOf\"]},\"doc\":\"Specific type of the relationship between the event and the business entity\"},{\"name\":\"data\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"Specific data of the related entity at the moment the event is triggered\",\"default\":null}]}}],\"doc\":\"Relationship between the message and different business entities\",\"default\":null},{\"name\":\"context\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"Context data of the message that does not belong in the definition of the main entity\",\"default\":null}]},\"doc\":\"Avro's metadata information.\"},{\"name\":\"payload\",\"type\":[{\"type\":\"record\",\"name\":\"BaseProductType\",\"doc\":\"Class that holds availability changes in a base product component.\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The product base reference\"},{\"name\":\"product_ref\",\"type\":{\"type\":\"record\",\"name\":\"BaseProductRefType\",\"doc\":\"Class that holds the reference information of a base product\",\"fields\":[{\"name\":\"brand_id\",\"type\":\"int\",\"doc\":\"The attribute represents the item ' brandId, Zara, will have, (Zara,ZaraHome,ZaraSur)\"},{\"name\":\"type\",\"type\":\"int\",\"doc\":\"type of the product\"},{\"name\":\"model\",\"type\":\"int\",\"doc\":\"model of the product\"},{\"name\":\"quality\",\"type\":\"int\",\"doc\":\"quality of the product\"},{\"name\":\"season\",\"type\":\"string\",\"doc\":\"Season of the product\"},{\"name\":\"article_master_id\",\"type\":\"long\",\"doc\":\"db2 master article id from table maestros.articulo\"}]},\"doc\":\"the reference of the base product\"},{\"name\":\"legacy_catentry_id\",\"type\":[\"null\",\"long\"],\"doc\":\"The db2 product id for the beginning of the migration for the new product model\",\"default\":null},{\"name\":\"classification\",\"type\":{\"type\":\"record\",\"name\":\"BaseProductClassificationType\",\"doc\":\"Class that holds availability changes in a base product component.\",\"fields\":[{\"name\":\"family_id\",\"type\":\"int\",\"doc\":\"family id from master db\"},{\"name\":\"sub_family_id\",\"type\":\"int\",\"doc\":\"subfamily id from master db\"},{\"name\":\"section_type_id\",\"type\":\"int\",\"doc\":\"Secction id that represents Woman, man, kids.\"},{\"name\":\"sub_section_id\",\"type\":\"int\",\"doc\":\"subSecction id that represents Trf, classic...\"},{\"name\":\"size_system_id\",\"type\":\"int\",\"doc\":\"Size sistem of the product\"}]},\"doc\":\"the reference of the base product\"},{\"name\":\"gender\",\"type\":{\"type\":\"enum\",\"name\":\"GenderEnum\",\"symbols\":[\"UNKNOWN\",\"MALE\",\"FEMALE\"]},\"doc\":\"The attribute represents the product gender\"},{\"name\":\"part\",\"type\":{\"type\":\"enum\",\"name\":\"PartEnum\",\"symbols\":[\"UNKNOWN\",\"UPPER\",\"BOTTOM\"]},\"doc\":\"The attribute represents if the article is an upper part.\"},{\"name\":\"base_product_level_attributes\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"BaseProductAttrType\",\"doc\":\"Class that holds availability changes in a base product component.\",\"fields\":[{\"name\":\"basic_attrs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"List of basic attributes\"},{\"name\":\"custom_attributes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BaseProductCustomAttributeType\",\"doc\":\"Class that holds the attribute information of a base product\",\"fields\":[{\"name\":\"attr_code\",\"type\":\"string\",\"doc\":\"Key of the attribute\"},{\"name\":\"attr_type\",\"type\":{\"type\":\"enum\",\"name\":\"AttrTypeEnum\",\"symbols\":[\"NUMBER\",\"STRING\",\"BOOLEAN\"]},\"doc\":\"Primitive data type of the attribute\"},{\"name\":\"attr_value\",\"type\":\"string\",\"doc\":\"Value of the attribute\"}]}}],\"doc\":\"Key value atributes)\",\"default\":null}]}],\"doc\":\"Attributes at product level\",\"default\":null},{\"name\":\"base_product_variants\",\"type\":{\"type\":\"arr","ay\",\"items\":{\"type\":\"record\",\"name\":\"BaseProductVariantType\",\"doc\":\"Class that holds the color information of a base product\",\"fields\":[{\"name\":\"color\",\"type\":\"string\",\"doc\":\"cod color from partnumber\"},{\"name\":\"color_id\",\"type\":\"int\",\"doc\":\"ItemBean's id color\"},{\"name\":\"base_color_level_attributes\",\"type\":[\"null\",\"BaseProductAttrType\"],\"doc\":\"Attributes at color level\",\"default\":null},{\"name\":\"updated_at\",\"type\":\"long\",\"doc\":\"The timestamp of the update date\"},{\"name\":\"sizes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BaseProductSizeAttributeType\",\"doc\":\"Class that holds data attributes by size\",\"fields\":[{\"name\":\"reference\",\"type\":\"string\",\"doc\":\"itemBean's reference\"},{\"name\":\"legacy_catentry_id\",\"type\":[\"null\",\"long\"],\"doc\":\"The db2 product id for the beginning of the migration for the new product model\",\"default\":null},{\"name\":\"updated_at\",\"type\":\"long\",\"doc\":\"The timestamp of the update date\"},{\"name\":\"size_id\",\"type\":\"int\",\"doc\":\"ItemBean's id size\"},{\"name\":\"base_size_level_attributes\",\"type\":[\"null\",\"BaseProductAttrType\"],\"doc\":\"Attributes at size level\",\"default\":null},{\"name\":\"dimension\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"BaseProductDimensionType\",\"doc\":\"Class that holds the item's dimensions.\",\"fields\":[{\"name\":\"lenght\",\"type\":[\"null\",\"double\"],\"doc\":\"The product lenght\",\"default\":null},{\"name\":\"width\",\"type\":[\"null\",\"double\"],\"doc\":\"The product width\",\"default\":null},{\"name\":\"height\",\"type\":[\"null\",\"double\"],\"doc\":\"The product height\",\"default\":null},{\"name\":\"unit\",\"type\":\"string\",\"doc\":\"the measure unit\"}]}],\"doc\":\"Dimensions info\",\"default\":null},{\"name\":\"weight\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"BaseProductWeightType\",\"doc\":\"Class that holds the product ' weight information\",\"fields\":[{\"name\":\"value\",\"type\":\"double\",\"doc\":\"The weight ' amount\"},{\"name\":\"unit\",\"type\":\"string\",\"doc\":\"The weight unit\"}]}],\"doc\":\"Weight data\",\"default\":null}]}},\"doc\":\"Object with the size info\"}]}},\"doc\":\"List product color\"},{\"name\":\"twinned_references\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BaseProductTwinnedReferenceType\",\"doc\":\"Class that holds the internal id of the a product's doble reference\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"key of a double reference\"}]}}],\"doc\":\"List of twinned references, (references of baseProductType)\",\"default\":null},{\"name\":\"created_at\",\"type\":\"long\",\"doc\":\"The timestamp of the creation date\"},{\"name\":\"updated_at\",\"type\":\"long\",\"doc\":\"The timestamp of the update date\"}]}],\"doc\":\"Content of message\"}],\"subject\":\"meccano.productandcatalog.baseproduct.v1-value\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BaseProductChangeEnvelope> ENCODER =
      new BinaryMessageEncoder<BaseProductChangeEnvelope>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BaseProductChangeEnvelope> DECODER =
      new BinaryMessageDecoder<BaseProductChangeEnvelope>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BaseProductChangeEnvelope> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BaseProductChangeEnvelope> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BaseProductChangeEnvelope> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BaseProductChangeEnvelope>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BaseProductChangeEnvelope to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BaseProductChangeEnvelope from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BaseProductChangeEnvelope instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BaseProductChangeEnvelope fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Avro's metadata information. */
  @Deprecated public com.inditex.aqsw.pipe.v1.Metadata metadata;
  /** Content of message */
  @Deprecated public java.lang.Object payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BaseProductChangeEnvelope() {}

  /**
   * All-args constructor.
   * @param metadata Avro's metadata information.
   * @param payload Content of message
   */
  public BaseProductChangeEnvelope(com.inditex.aqsw.pipe.v1.Metadata metadata, java.lang.Object payload) {
    this.metadata = metadata;
    this.payload = payload;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return metadata;
    case 1: return payload;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: metadata = (com.inditex.aqsw.pipe.v1.Metadata)value$; break;
    case 1: payload = value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'metadata' field.
   * @return Avro's metadata information.
   */
  public com.inditex.aqsw.pipe.v1.Metadata getMetadata() {
    return metadata;
  }


  /**
   * Sets the value of the 'metadata' field.
   * Avro's metadata information.
   * @param value the value to set.
   */
  public void setMetadata(com.inditex.aqsw.pipe.v1.Metadata value) {
    this.metadata = value;
  }

  /**
   * Gets the value of the 'payload' field.
   * @return Content of message
   */
  public java.lang.Object getPayload() {
    return payload;
  }


  /**
   * Sets the value of the 'payload' field.
   * Content of message
   * @param value the value to set.
   */
  public void setPayload(java.lang.Object value) {
    this.payload = value;
  }

  /**
   * Creates a new BaseProductChangeEnvelope RecordBuilder.
   * @return A new BaseProductChangeEnvelope RecordBuilder
   */
  public static com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope.Builder newBuilder() {
    return new com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope.Builder();
  }

  /**
   * Creates a new BaseProductChangeEnvelope RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BaseProductChangeEnvelope RecordBuilder
   */
  public static com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope.Builder newBuilder(com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope.Builder other) {
    if (other == null) {
      return new com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope.Builder();
    } else {
      return new com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope.Builder(other);
    }
  }

  /**
   * Creates a new BaseProductChangeEnvelope RecordBuilder by copying an existing BaseProductChangeEnvelope instance.
   * @param other The existing instance to copy.
   * @return A new BaseProductChangeEnvelope RecordBuilder
   */
  public static com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope.Builder newBuilder(com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope other) {
    if (other == null) {
      return new com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope.Builder();
    } else {
      return new com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope.Builder(other);
    }
  }

  /**
   * RecordBuilder for BaseProductChangeEnvelope instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BaseProductChangeEnvelope>
    implements org.apache.avro.data.RecordBuilder<BaseProductChangeEnvelope> {

    /** Avro's metadata information. */
    private com.inditex.aqsw.pipe.v1.Metadata metadata;
    private com.inditex.aqsw.pipe.v1.Metadata.Builder metadataBuilder;
    /** Content of message */
    private java.lang.Object payload;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.metadata)) {
        this.metadata = data().deepCopy(fields()[0].schema(), other.metadata);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasMetadataBuilder()) {
        this.metadataBuilder = com.inditex.aqsw.pipe.v1.Metadata.newBuilder(other.getMetadataBuilder());
      }
      if (isValidValue(fields()[1], other.payload)) {
        this.payload = data().deepCopy(fields()[1].schema(), other.payload);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing BaseProductChangeEnvelope instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.metadata)) {
        this.metadata = data().deepCopy(fields()[0].schema(), other.metadata);
        fieldSetFlags()[0] = true;
      }
      this.metadataBuilder = null;
      if (isValidValue(fields()[1], other.payload)) {
        this.payload = data().deepCopy(fields()[1].schema(), other.payload);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'metadata' field.
      * Avro's metadata information.
      * @return The value.
      */
    public com.inditex.aqsw.pipe.v1.Metadata getMetadata() {
      return metadata;
    }


    /**
      * Sets the value of the 'metadata' field.
      * Avro's metadata information.
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope.Builder setMetadata(com.inditex.aqsw.pipe.v1.Metadata value) {
      validate(fields()[0], value);
      this.metadataBuilder = null;
      this.metadata = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * Avro's metadata information.
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'metadata' field and creates one if it doesn't exist yet.
     * Avro's metadata information.
     * @return This builder.
     */
    public com.inditex.aqsw.pipe.v1.Metadata.Builder getMetadataBuilder() {
      if (metadataBuilder == null) {
        if (hasMetadata()) {
          setMetadataBuilder(com.inditex.aqsw.pipe.v1.Metadata.newBuilder(metadata));
        } else {
          setMetadataBuilder(com.inditex.aqsw.pipe.v1.Metadata.newBuilder());
        }
      }
      return metadataBuilder;
    }

    /**
     * Sets the Builder instance for the 'metadata' field
     * Avro's metadata information.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope.Builder setMetadataBuilder(com.inditex.aqsw.pipe.v1.Metadata.Builder value) {
      clearMetadata();
      metadataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'metadata' field has an active Builder instance
     * Avro's metadata information.
     * @return True if the 'metadata' field has an active Builder instance
     */
    public boolean hasMetadataBuilder() {
      return metadataBuilder != null;
    }

    /**
      * Clears the value of the 'metadata' field.
      * Avro's metadata information.
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope.Builder clearMetadata() {
      metadata = null;
      metadataBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * Content of message
      * @return The value.
      */
    public java.lang.Object getPayload() {
      return payload;
    }


    /**
      * Sets the value of the 'payload' field.
      * Content of message
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope.Builder setPayload(java.lang.Object value) {
      validate(fields()[1], value);
      this.payload = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * Content of message
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'payload' field.
      * Content of message
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v1.BaseProductChangeEnvelope.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BaseProductChangeEnvelope build() {
      try {
        BaseProductChangeEnvelope record = new BaseProductChangeEnvelope();
        if (metadataBuilder != null) {
          try {
            record.metadata = this.metadataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("metadata"));
            throw e;
          }
        } else {
          record.metadata = fieldSetFlags()[0] ? this.metadata : (com.inditex.aqsw.pipe.v1.Metadata) defaultValue(fields()[0]);
        }
        record.payload = fieldSetFlags()[1] ? this.payload :  defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BaseProductChangeEnvelope>
    WRITER$ = (org.apache.avro.io.DatumWriter<BaseProductChangeEnvelope>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BaseProductChangeEnvelope>
    READER$ = (org.apache.avro.io.DatumReader<BaseProductChangeEnvelope>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










