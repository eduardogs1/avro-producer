/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.ecomloadbk.api.avro.v2;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Class that holds the currencuy, price, and comparePrice type */
@org.apache.avro.specific.AvroGenerated
public class TimeLinePriceInfoType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3440734590516647657L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TimeLinePriceInfoType\",\"namespace\":\"com.inditex.mecc.ecomloadbk.api.avro.v2\",\"doc\":\"Class that holds the currencuy, price, and comparePrice type\",\"fields\":[{\"name\":\"price\",\"type\":\"long\",\"doc\":\"The price amount\"},{\"name\":\"compare_price\",\"type\":[\"null\",\"long\"],\"doc\":\"The amount of the compare price / previous price\",\"default\":null},{\"name\":\"currency_iso\",\"type\":\"string\",\"doc\":\"The currency iso\"},{\"name\":\"currency_exponent\",\"type\":\"int\",\"doc\":\"The currency iso\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TimeLinePriceInfoType> ENCODER =
      new BinaryMessageEncoder<TimeLinePriceInfoType>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TimeLinePriceInfoType> DECODER =
      new BinaryMessageDecoder<TimeLinePriceInfoType>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TimeLinePriceInfoType> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TimeLinePriceInfoType> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TimeLinePriceInfoType> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TimeLinePriceInfoType>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TimeLinePriceInfoType to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TimeLinePriceInfoType from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TimeLinePriceInfoType instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TimeLinePriceInfoType fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The price amount */
  @Deprecated public long price;
  /** The amount of the compare price / previous price */
  @Deprecated public java.lang.Long compare_price;
  /** The currency iso */
  @Deprecated public java.lang.CharSequence currency_iso;
  /** The currency iso */
  @Deprecated public int currency_exponent;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TimeLinePriceInfoType() {}

  /**
   * All-args constructor.
   * @param price The price amount
   * @param compare_price The amount of the compare price / previous price
   * @param currency_iso The currency iso
   * @param currency_exponent The currency iso
   */
  public TimeLinePriceInfoType(java.lang.Long price, java.lang.Long compare_price, java.lang.CharSequence currency_iso, java.lang.Integer currency_exponent) {
    this.price = price;
    this.compare_price = compare_price;
    this.currency_iso = currency_iso;
    this.currency_exponent = currency_exponent;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return price;
    case 1: return compare_price;
    case 2: return currency_iso;
    case 3: return currency_exponent;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: price = (java.lang.Long)value$; break;
    case 1: compare_price = (java.lang.Long)value$; break;
    case 2: currency_iso = (java.lang.CharSequence)value$; break;
    case 3: currency_exponent = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'price' field.
   * @return The price amount
   */
  public long getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * The price amount
   * @param value the value to set.
   */
  public void setPrice(long value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'compare_price' field.
   * @return The amount of the compare price / previous price
   */
  public java.lang.Long getComparePrice() {
    return compare_price;
  }


  /**
   * Sets the value of the 'compare_price' field.
   * The amount of the compare price / previous price
   * @param value the value to set.
   */
  public void setComparePrice(java.lang.Long value) {
    this.compare_price = value;
  }

  /**
   * Gets the value of the 'currency_iso' field.
   * @return The currency iso
   */
  public java.lang.CharSequence getCurrencyIso() {
    return currency_iso;
  }


  /**
   * Sets the value of the 'currency_iso' field.
   * The currency iso
   * @param value the value to set.
   */
  public void setCurrencyIso(java.lang.CharSequence value) {
    this.currency_iso = value;
  }

  /**
   * Gets the value of the 'currency_exponent' field.
   * @return The currency iso
   */
  public int getCurrencyExponent() {
    return currency_exponent;
  }


  /**
   * Sets the value of the 'currency_exponent' field.
   * The currency iso
   * @param value the value to set.
   */
  public void setCurrencyExponent(int value) {
    this.currency_exponent = value;
  }

  /**
   * Creates a new TimeLinePriceInfoType RecordBuilder.
   * @return A new TimeLinePriceInfoType RecordBuilder
   */
  public static com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder newBuilder() {
    return new com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder();
  }

  /**
   * Creates a new TimeLinePriceInfoType RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TimeLinePriceInfoType RecordBuilder
   */
  public static com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder newBuilder(com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder other) {
    if (other == null) {
      return new com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder();
    } else {
      return new com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder(other);
    }
  }

  /**
   * Creates a new TimeLinePriceInfoType RecordBuilder by copying an existing TimeLinePriceInfoType instance.
   * @param other The existing instance to copy.
   * @return A new TimeLinePriceInfoType RecordBuilder
   */
  public static com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder newBuilder(com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType other) {
    if (other == null) {
      return new com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder();
    } else {
      return new com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder(other);
    }
  }

  /**
   * RecordBuilder for TimeLinePriceInfoType instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TimeLinePriceInfoType>
    implements org.apache.avro.data.RecordBuilder<TimeLinePriceInfoType> {

    /** The price amount */
    private long price;
    /** The amount of the compare price / previous price */
    private java.lang.Long compare_price;
    /** The currency iso */
    private java.lang.CharSequence currency_iso;
    /** The currency iso */
    private int currency_exponent;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.price)) {
        this.price = data().deepCopy(fields()[0].schema(), other.price);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.compare_price)) {
        this.compare_price = data().deepCopy(fields()[1].schema(), other.compare_price);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.currency_iso)) {
        this.currency_iso = data().deepCopy(fields()[2].schema(), other.currency_iso);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.currency_exponent)) {
        this.currency_exponent = data().deepCopy(fields()[3].schema(), other.currency_exponent);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing TimeLinePriceInfoType instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.price)) {
        this.price = data().deepCopy(fields()[0].schema(), other.price);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.compare_price)) {
        this.compare_price = data().deepCopy(fields()[1].schema(), other.compare_price);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currency_iso)) {
        this.currency_iso = data().deepCopy(fields()[2].schema(), other.currency_iso);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.currency_exponent)) {
        this.currency_exponent = data().deepCopy(fields()[3].schema(), other.currency_exponent);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'price' field.
      * The price amount
      * @return The value.
      */
    public long getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * The price amount
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder setPrice(long value) {
      validate(fields()[0], value);
      this.price = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * The price amount
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'price' field.
      * The price amount
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder clearPrice() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'compare_price' field.
      * The amount of the compare price / previous price
      * @return The value.
      */
    public java.lang.Long getComparePrice() {
      return compare_price;
    }


    /**
      * Sets the value of the 'compare_price' field.
      * The amount of the compare price / previous price
      * @param value The value of 'compare_price'.
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder setComparePrice(java.lang.Long value) {
      validate(fields()[1], value);
      this.compare_price = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'compare_price' field has been set.
      * The amount of the compare price / previous price
      * @return True if the 'compare_price' field has been set, false otherwise.
      */
    public boolean hasComparePrice() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'compare_price' field.
      * The amount of the compare price / previous price
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder clearComparePrice() {
      compare_price = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency_iso' field.
      * The currency iso
      * @return The value.
      */
    public java.lang.CharSequence getCurrencyIso() {
      return currency_iso;
    }


    /**
      * Sets the value of the 'currency_iso' field.
      * The currency iso
      * @param value The value of 'currency_iso'.
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder setCurrencyIso(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.currency_iso = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'currency_iso' field has been set.
      * The currency iso
      * @return True if the 'currency_iso' field has been set, false otherwise.
      */
    public boolean hasCurrencyIso() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'currency_iso' field.
      * The currency iso
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder clearCurrencyIso() {
      currency_iso = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency_exponent' field.
      * The currency iso
      * @return The value.
      */
    public int getCurrencyExponent() {
      return currency_exponent;
    }


    /**
      * Sets the value of the 'currency_exponent' field.
      * The currency iso
      * @param value The value of 'currency_exponent'.
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder setCurrencyExponent(int value) {
      validate(fields()[3], value);
      this.currency_exponent = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'currency_exponent' field has been set.
      * The currency iso
      * @return True if the 'currency_exponent' field has been set, false otherwise.
      */
    public boolean hasCurrencyExponent() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'currency_exponent' field.
      * The currency iso
      * @return This builder.
      */
    public com.inditex.mecc.ecomloadbk.api.avro.v2.TimeLinePriceInfoType.Builder clearCurrencyExponent() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TimeLinePriceInfoType build() {
      try {
        TimeLinePriceInfoType record = new TimeLinePriceInfoType();
        record.price = fieldSetFlags()[0] ? this.price : (java.lang.Long) defaultValue(fields()[0]);
        record.compare_price = fieldSetFlags()[1] ? this.compare_price : (java.lang.Long) defaultValue(fields()[1]);
        record.currency_iso = fieldSetFlags()[2] ? this.currency_iso : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.currency_exponent = fieldSetFlags()[3] ? this.currency_exponent : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TimeLinePriceInfoType>
    WRITER$ = (org.apache.avro.io.DatumWriter<TimeLinePriceInfoType>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TimeLinePriceInfoType>
    READER$ = (org.apache.avro.io.DatumReader<TimeLinePriceInfoType>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.price);

    if (this.compare_price == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.compare_price);
    }

    out.writeString(this.currency_iso);

    out.writeInt(this.currency_exponent);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.price = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.compare_price = null;
      } else {
        this.compare_price = in.readLong();
      }

      this.currency_iso = in.readString(this.currency_iso instanceof Utf8 ? (Utf8)this.currency_iso : null);

      this.currency_exponent = in.readInt();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.price = in.readLong();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.compare_price = null;
          } else {
            this.compare_price = in.readLong();
          }
          break;

        case 2:
          this.currency_iso = in.readString(this.currency_iso instanceof Utf8 ? (Utf8)this.currency_iso : null);
          break;

        case 3:
          this.currency_exponent = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










