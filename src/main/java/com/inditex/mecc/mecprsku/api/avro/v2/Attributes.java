/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.mecprsku.api.avro.v2;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Class that holds attributes of a sku. */
@org.apache.avro.specific.AvroGenerated
public class Attributes extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7429898761408157622L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Attributes\",\"namespace\":\"com.inditex.mecc.mecprsku.api.avro.v2\",\"doc\":\"Class that holds attributes of a sku.\",\"fields\":[{\"name\":\"basic_attrs\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"List of basic attributes of the given SKU\"},{\"name\":\"valued_attrs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ValuedAttribute\",\"doc\":\"Class that holds the valued attribute information.\",\"fields\":[{\"name\":\"attr_code\",\"type\":\"string\",\"doc\":\"Key of the attribute\"},{\"name\":\"attr_type\",\"type\":\"string\",\"doc\":\"Primitive data type of the attribute\"},{\"name\":\"attr_value\",\"type\":\"string\",\"doc\":\"Value of the attribute\"}]}},\"doc\":\"List of valued attributes of the given SKU\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Attributes> ENCODER =
      new BinaryMessageEncoder<Attributes>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Attributes> DECODER =
      new BinaryMessageDecoder<Attributes>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Attributes> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Attributes> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Attributes>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Attributes to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Attributes from a ByteBuffer. */
  public static Attributes fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** List of basic attributes of the given SKU */
  @Deprecated public java.util.List<java.lang.CharSequence> basic_attrs;
  /** List of valued attributes of the given SKU */
  @Deprecated public java.util.List<com.inditex.mecc.mecprsku.api.avro.v2.ValuedAttribute> valued_attrs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Attributes() {}

  /**
   * All-args constructor.
   * @param basic_attrs List of basic attributes of the given SKU
   * @param valued_attrs List of valued attributes of the given SKU
   */
  public Attributes(java.util.List<java.lang.CharSequence> basic_attrs, java.util.List<com.inditex.mecc.mecprsku.api.avro.v2.ValuedAttribute> valued_attrs) {
    this.basic_attrs = basic_attrs;
    this.valued_attrs = valued_attrs;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return basic_attrs;
    case 1: return valued_attrs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: basic_attrs = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: valued_attrs = (java.util.List<com.inditex.mecc.mecprsku.api.avro.v2.ValuedAttribute>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'basic_attrs' field.
   * @return List of basic attributes of the given SKU
   */
  public java.util.List<java.lang.CharSequence> getBasicAttrs() {
    return basic_attrs;
  }

  /**
   * Sets the value of the 'basic_attrs' field.
   * List of basic attributes of the given SKU
   * @param value the value to set.
   */
  public void setBasicAttrs(java.util.List<java.lang.CharSequence> value) {
    this.basic_attrs = value;
  }

  /**
   * Gets the value of the 'valued_attrs' field.
   * @return List of valued attributes of the given SKU
   */
  public java.util.List<com.inditex.mecc.mecprsku.api.avro.v2.ValuedAttribute> getValuedAttrs() {
    return valued_attrs;
  }

  /**
   * Sets the value of the 'valued_attrs' field.
   * List of valued attributes of the given SKU
   * @param value the value to set.
   */
  public void setValuedAttrs(java.util.List<com.inditex.mecc.mecprsku.api.avro.v2.ValuedAttribute> value) {
    this.valued_attrs = value;
  }

  /**
   * Creates a new Attributes RecordBuilder.
   * @return A new Attributes RecordBuilder
   */
  public static com.inditex.mecc.mecprsku.api.avro.v2.Attributes.Builder newBuilder() {
    return new com.inditex.mecc.mecprsku.api.avro.v2.Attributes.Builder();
  }

  /**
   * Creates a new Attributes RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Attributes RecordBuilder
   */
  public static com.inditex.mecc.mecprsku.api.avro.v2.Attributes.Builder newBuilder(com.inditex.mecc.mecprsku.api.avro.v2.Attributes.Builder other) {
    return new com.inditex.mecc.mecprsku.api.avro.v2.Attributes.Builder(other);
  }

  /**
   * Creates a new Attributes RecordBuilder by copying an existing Attributes instance.
   * @param other The existing instance to copy.
   * @return A new Attributes RecordBuilder
   */
  public static com.inditex.mecc.mecprsku.api.avro.v2.Attributes.Builder newBuilder(com.inditex.mecc.mecprsku.api.avro.v2.Attributes other) {
    return new com.inditex.mecc.mecprsku.api.avro.v2.Attributes.Builder(other);
  }

  /**
   * RecordBuilder for Attributes instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Attributes>
    implements org.apache.avro.data.RecordBuilder<Attributes> {

    /** List of basic attributes of the given SKU */
    private java.util.List<java.lang.CharSequence> basic_attrs;
    /** List of valued attributes of the given SKU */
    private java.util.List<com.inditex.mecc.mecprsku.api.avro.v2.ValuedAttribute> valued_attrs;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.mecprsku.api.avro.v2.Attributes.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.basic_attrs)) {
        this.basic_attrs = data().deepCopy(fields()[0].schema(), other.basic_attrs);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.valued_attrs)) {
        this.valued_attrs = data().deepCopy(fields()[1].schema(), other.valued_attrs);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Attributes instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.mecprsku.api.avro.v2.Attributes other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.basic_attrs)) {
        this.basic_attrs = data().deepCopy(fields()[0].schema(), other.basic_attrs);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.valued_attrs)) {
        this.valued_attrs = data().deepCopy(fields()[1].schema(), other.valued_attrs);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'basic_attrs' field.
      * List of basic attributes of the given SKU
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getBasicAttrs() {
      return basic_attrs;
    }

    /**
      * Sets the value of the 'basic_attrs' field.
      * List of basic attributes of the given SKU
      * @param value The value of 'basic_attrs'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprsku.api.avro.v2.Attributes.Builder setBasicAttrs(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.basic_attrs = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'basic_attrs' field has been set.
      * List of basic attributes of the given SKU
      * @return True if the 'basic_attrs' field has been set, false otherwise.
      */
    public boolean hasBasicAttrs() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'basic_attrs' field.
      * List of basic attributes of the given SKU
      * @return This builder.
      */
    public com.inditex.mecc.mecprsku.api.avro.v2.Attributes.Builder clearBasicAttrs() {
      basic_attrs = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'valued_attrs' field.
      * List of valued attributes of the given SKU
      * @return The value.
      */
    public java.util.List<com.inditex.mecc.mecprsku.api.avro.v2.ValuedAttribute> getValuedAttrs() {
      return valued_attrs;
    }

    /**
      * Sets the value of the 'valued_attrs' field.
      * List of valued attributes of the given SKU
      * @param value The value of 'valued_attrs'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprsku.api.avro.v2.Attributes.Builder setValuedAttrs(java.util.List<com.inditex.mecc.mecprsku.api.avro.v2.ValuedAttribute> value) {
      validate(fields()[1], value);
      this.valued_attrs = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'valued_attrs' field has been set.
      * List of valued attributes of the given SKU
      * @return True if the 'valued_attrs' field has been set, false otherwise.
      */
    public boolean hasValuedAttrs() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'valued_attrs' field.
      * List of valued attributes of the given SKU
      * @return This builder.
      */
    public com.inditex.mecc.mecprsku.api.avro.v2.Attributes.Builder clearValuedAttrs() {
      valued_attrs = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Attributes build() {
      try {
        Attributes record = new Attributes();
        record.basic_attrs = fieldSetFlags()[0] ? this.basic_attrs : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.valued_attrs = fieldSetFlags()[1] ? this.valued_attrs : (java.util.List<com.inditex.mecc.mecprsku.api.avro.v2.ValuedAttribute>) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Attributes>
    WRITER$ = (org.apache.avro.io.DatumWriter<Attributes>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Attributes>
    READER$ = (org.apache.avro.io.DatumReader<Attributes>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
