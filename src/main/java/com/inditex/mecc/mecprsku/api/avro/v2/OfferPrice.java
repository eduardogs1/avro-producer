/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.mecprsku.api.avro.v2;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Class that holds price information for a given period of time. */
@org.apache.avro.specific.AvroGenerated
public class OfferPrice extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2032915110585562205L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OfferPrice\",\"namespace\":\"com.inditex.mecc.mecprsku.api.avro.v2\",\"doc\":\"Class that holds price information for a given period of time.\",\"fields\":[{\"name\":\"amount\",\"type\":\"long\",\"doc\":\"Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).\"},{\"name\":\"compare_amount\",\"type\":[\"null\",\"long\"],\"doc\":\"Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.\"},{\"name\":\"currency_iso\",\"type\":\"string\",\"doc\":\"Currency ISO 4217 code.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OfferPrice> ENCODER =
      new BinaryMessageEncoder<OfferPrice>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OfferPrice> DECODER =
      new BinaryMessageDecoder<OfferPrice>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<OfferPrice> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<OfferPrice> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OfferPrice>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this OfferPrice to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a OfferPrice from a ByteBuffer. */
  public static OfferPrice fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). */
  @Deprecated public long amount;
  /** Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales. */
  @Deprecated public java.lang.Long compare_amount;
  /** Currency ISO 4217 code. */
  @Deprecated public java.lang.CharSequence currency_iso;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OfferPrice() {}

  /**
   * All-args constructor.
   * @param amount Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).
   * @param compare_amount Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.
   * @param currency_iso Currency ISO 4217 code.
   */
  public OfferPrice(java.lang.Long amount, java.lang.Long compare_amount, java.lang.CharSequence currency_iso) {
    this.amount = amount;
    this.compare_amount = compare_amount;
    this.currency_iso = currency_iso;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return amount;
    case 1: return compare_amount;
    case 2: return currency_iso;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: amount = (java.lang.Long)value$; break;
    case 1: compare_amount = (java.lang.Long)value$; break;
    case 2: currency_iso = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'amount' field.
   * @return Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).
   */
  public java.lang.Long getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).
   * @param value the value to set.
   */
  public void setAmount(java.lang.Long value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'compare_amount' field.
   * @return Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.
   */
  public java.lang.Long getCompareAmount() {
    return compare_amount;
  }

  /**
   * Sets the value of the 'compare_amount' field.
   * Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.
   * @param value the value to set.
   */
  public void setCompareAmount(java.lang.Long value) {
    this.compare_amount = value;
  }

  /**
   * Gets the value of the 'currency_iso' field.
   * @return Currency ISO 4217 code.
   */
  public java.lang.CharSequence getCurrencyIso() {
    return currency_iso;
  }

  /**
   * Sets the value of the 'currency_iso' field.
   * Currency ISO 4217 code.
   * @param value the value to set.
   */
  public void setCurrencyIso(java.lang.CharSequence value) {
    this.currency_iso = value;
  }

  /**
   * Creates a new OfferPrice RecordBuilder.
   * @return A new OfferPrice RecordBuilder
   */
  public static com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice.Builder newBuilder() {
    return new com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice.Builder();
  }

  /**
   * Creates a new OfferPrice RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OfferPrice RecordBuilder
   */
  public static com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice.Builder newBuilder(com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice.Builder other) {
    return new com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice.Builder(other);
  }

  /**
   * Creates a new OfferPrice RecordBuilder by copying an existing OfferPrice instance.
   * @param other The existing instance to copy.
   * @return A new OfferPrice RecordBuilder
   */
  public static com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice.Builder newBuilder(com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice other) {
    return new com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice.Builder(other);
  }

  /**
   * RecordBuilder for OfferPrice instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OfferPrice>
    implements org.apache.avro.data.RecordBuilder<OfferPrice> {

    /** Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). */
    private long amount;
    /** Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales. */
    private java.lang.Long compare_amount;
    /** Currency ISO 4217 code. */
    private java.lang.CharSequence currency_iso;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.amount)) {
        this.amount = data().deepCopy(fields()[0].schema(), other.amount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.compare_amount)) {
        this.compare_amount = data().deepCopy(fields()[1].schema(), other.compare_amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currency_iso)) {
        this.currency_iso = data().deepCopy(fields()[2].schema(), other.currency_iso);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing OfferPrice instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.amount)) {
        this.amount = data().deepCopy(fields()[0].schema(), other.amount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.compare_amount)) {
        this.compare_amount = data().deepCopy(fields()[1].schema(), other.compare_amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currency_iso)) {
        this.currency_iso = data().deepCopy(fields()[2].schema(), other.currency_iso);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'amount' field.
      * Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).
      * @return The value.
      */
    public java.lang.Long getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice.Builder setAmount(long value) {
      validate(fields()[0], value);
      this.amount = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'amount' field.
      * Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).
      * @return This builder.
      */
    public com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice.Builder clearAmount() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'compare_amount' field.
      * Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.
      * @return The value.
      */
    public java.lang.Long getCompareAmount() {
      return compare_amount;
    }

    /**
      * Sets the value of the 'compare_amount' field.
      * Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.
      * @param value The value of 'compare_amount'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice.Builder setCompareAmount(java.lang.Long value) {
      validate(fields()[1], value);
      this.compare_amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'compare_amount' field has been set.
      * Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.
      * @return True if the 'compare_amount' field has been set, false otherwise.
      */
    public boolean hasCompareAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'compare_amount' field.
      * Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.
      * @return This builder.
      */
    public com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice.Builder clearCompareAmount() {
      compare_amount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency_iso' field.
      * Currency ISO 4217 code.
      * @return The value.
      */
    public java.lang.CharSequence getCurrencyIso() {
      return currency_iso;
    }

    /**
      * Sets the value of the 'currency_iso' field.
      * Currency ISO 4217 code.
      * @param value The value of 'currency_iso'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice.Builder setCurrencyIso(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.currency_iso = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'currency_iso' field has been set.
      * Currency ISO 4217 code.
      * @return True if the 'currency_iso' field has been set, false otherwise.
      */
    public boolean hasCurrencyIso() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'currency_iso' field.
      * Currency ISO 4217 code.
      * @return This builder.
      */
    public com.inditex.mecc.mecprsku.api.avro.v2.OfferPrice.Builder clearCurrencyIso() {
      currency_iso = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OfferPrice build() {
      try {
        OfferPrice record = new OfferPrice();
        record.amount = fieldSetFlags()[0] ? this.amount : (java.lang.Long) defaultValue(fields()[0]);
        record.compare_amount = fieldSetFlags()[1] ? this.compare_amount : (java.lang.Long) defaultValue(fields()[1]);
        record.currency_iso = fieldSetFlags()[2] ? this.currency_iso : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OfferPrice>
    WRITER$ = (org.apache.avro.io.DatumWriter<OfferPrice>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OfferPrice>
    READER$ = (org.apache.avro.io.DatumReader<OfferPrice>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
