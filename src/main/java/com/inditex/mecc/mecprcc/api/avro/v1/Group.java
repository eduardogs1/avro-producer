/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.mecprcc.api.avro.v1;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Class that holds the Commercial Component Group information. */
@org.apache.avro.specific.AvroGenerated
public class Group extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1423086277260415745L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Group\",\"namespace\":\"com.inditex.mecc.mecprcc.api.avro.v1\",\"doc\":\"Class that holds the Commercial Component Group information.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Commercial Component Group's name\"},{\"name\":\"position\",\"type\":\"int\",\"doc\":\"Commercial Component Group's position\"},{\"name\":\"relations\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"GroupRelation\",\"doc\":\"Class that holds the Commercial Component Group Relation information.\",\"fields\":[{\"name\":\"product_id\",\"type\":\"long\",\"doc\":\"Product's unique identifier\"},{\"name\":\"color_id\",\"type\":[\"null\",\"int\"],\"doc\":\"Color's unique identifier\"},{\"name\":\"is_main\",\"type\":\"boolean\",\"doc\":\"Whether it's the main product of the Commercial Component\"},{\"name\":\"position\",\"type\":\"int\",\"doc\":\"Product's position in Commercial Component\"},{\"name\":\"size_id\",\"type\":[\"null\",\"int\"],\"doc\":\"Size's unique identifier\"},{\"name\":\"style_id\",\"type\":[\"null\",\"int\"],\"doc\":\"Optional styling of the product\"}]}},\"doc\":\"List of relations of the Commercial Component Group\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Group> ENCODER =
      new BinaryMessageEncoder<Group>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Group> DECODER =
      new BinaryMessageDecoder<Group>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Group> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Group> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Group>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Group to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Group from a ByteBuffer. */
  public static Group fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Commercial Component Group's name */
  @Deprecated public java.lang.CharSequence name;
  /** Commercial Component Group's position */
  @Deprecated public int position;
  /** List of relations of the Commercial Component Group */
  @Deprecated public java.util.List<com.inditex.mecc.mecprcc.api.avro.v1.GroupRelation> relations;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Group() {}

  /**
   * All-args constructor.
   * @param name Commercial Component Group's name
   * @param position Commercial Component Group's position
   * @param relations List of relations of the Commercial Component Group
   */
  public Group(java.lang.CharSequence name, java.lang.Integer position, java.util.List<com.inditex.mecc.mecprcc.api.avro.v1.GroupRelation> relations) {
    this.name = name;
    this.position = position;
    this.relations = relations;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return position;
    case 2: return relations;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: position = (java.lang.Integer)value$; break;
    case 2: relations = (java.util.List<com.inditex.mecc.mecprcc.api.avro.v1.GroupRelation>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return Commercial Component Group's name
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Commercial Component Group's name
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'position' field.
   * @return Commercial Component Group's position
   */
  public java.lang.Integer getPosition() {
    return position;
  }

  /**
   * Sets the value of the 'position' field.
   * Commercial Component Group's position
   * @param value the value to set.
   */
  public void setPosition(java.lang.Integer value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'relations' field.
   * @return List of relations of the Commercial Component Group
   */
  public java.util.List<com.inditex.mecc.mecprcc.api.avro.v1.GroupRelation> getRelations() {
    return relations;
  }

  /**
   * Sets the value of the 'relations' field.
   * List of relations of the Commercial Component Group
   * @param value the value to set.
   */
  public void setRelations(java.util.List<com.inditex.mecc.mecprcc.api.avro.v1.GroupRelation> value) {
    this.relations = value;
  }

  /**
   * Creates a new Group RecordBuilder.
   * @return A new Group RecordBuilder
   */
  public static com.inditex.mecc.mecprcc.api.avro.v1.Group.Builder newBuilder() {
    return new com.inditex.mecc.mecprcc.api.avro.v1.Group.Builder();
  }

  /**
   * Creates a new Group RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Group RecordBuilder
   */
  public static com.inditex.mecc.mecprcc.api.avro.v1.Group.Builder newBuilder(com.inditex.mecc.mecprcc.api.avro.v1.Group.Builder other) {
    return new com.inditex.mecc.mecprcc.api.avro.v1.Group.Builder(other);
  }

  /**
   * Creates a new Group RecordBuilder by copying an existing Group instance.
   * @param other The existing instance to copy.
   * @return A new Group RecordBuilder
   */
  public static com.inditex.mecc.mecprcc.api.avro.v1.Group.Builder newBuilder(com.inditex.mecc.mecprcc.api.avro.v1.Group other) {
    return new com.inditex.mecc.mecprcc.api.avro.v1.Group.Builder(other);
  }

  /**
   * RecordBuilder for Group instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Group>
    implements org.apache.avro.data.RecordBuilder<Group> {

    /** Commercial Component Group's name */
    private java.lang.CharSequence name;
    /** Commercial Component Group's position */
    private int position;
    /** List of relations of the Commercial Component Group */
    private java.util.List<com.inditex.mecc.mecprcc.api.avro.v1.GroupRelation> relations;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.mecprcc.api.avro.v1.Group.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.relations)) {
        this.relations = data().deepCopy(fields()[2].schema(), other.relations);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Group instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.mecprcc.api.avro.v1.Group other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.relations)) {
        this.relations = data().deepCopy(fields()[2].schema(), other.relations);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * Commercial Component Group's name
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Commercial Component Group's name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprcc.api.avro.v1.Group.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Commercial Component Group's name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * Commercial Component Group's name
      * @return This builder.
      */
    public com.inditex.mecc.mecprcc.api.avro.v1.Group.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'position' field.
      * Commercial Component Group's position
      * @return The value.
      */
    public java.lang.Integer getPosition() {
      return position;
    }

    /**
      * Sets the value of the 'position' field.
      * Commercial Component Group's position
      * @param value The value of 'position'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprcc.api.avro.v1.Group.Builder setPosition(int value) {
      validate(fields()[1], value);
      this.position = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'position' field has been set.
      * Commercial Component Group's position
      * @return True if the 'position' field has been set, false otherwise.
      */
    public boolean hasPosition() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'position' field.
      * Commercial Component Group's position
      * @return This builder.
      */
    public com.inditex.mecc.mecprcc.api.avro.v1.Group.Builder clearPosition() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'relations' field.
      * List of relations of the Commercial Component Group
      * @return The value.
      */
    public java.util.List<com.inditex.mecc.mecprcc.api.avro.v1.GroupRelation> getRelations() {
      return relations;
    }

    /**
      * Sets the value of the 'relations' field.
      * List of relations of the Commercial Component Group
      * @param value The value of 'relations'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprcc.api.avro.v1.Group.Builder setRelations(java.util.List<com.inditex.mecc.mecprcc.api.avro.v1.GroupRelation> value) {
      validate(fields()[2], value);
      this.relations = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'relations' field has been set.
      * List of relations of the Commercial Component Group
      * @return True if the 'relations' field has been set, false otherwise.
      */
    public boolean hasRelations() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'relations' field.
      * List of relations of the Commercial Component Group
      * @return This builder.
      */
    public com.inditex.mecc.mecprcc.api.avro.v1.Group.Builder clearRelations() {
      relations = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Group build() {
      try {
        Group record = new Group();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.position = fieldSetFlags()[1] ? this.position : (java.lang.Integer) defaultValue(fields()[1]);
        record.relations = fieldSetFlags()[2] ? this.relations : (java.util.List<com.inditex.mecc.mecprcc.api.avro.v1.GroupRelation>) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Group>
    WRITER$ = (org.apache.avro.io.DatumWriter<Group>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Group>
    READER$ = (org.apache.avro.io.DatumReader<Group>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
