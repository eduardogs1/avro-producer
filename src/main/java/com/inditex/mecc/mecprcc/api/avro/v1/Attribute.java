/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.mecprcc.api.avro.v1;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Class that holds a the attributes' texts for a Commercial Component and a locale */
@org.apache.avro.specific.AvroGenerated
public class Attribute extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4875145707893326014L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Attribute\",\"namespace\":\"com.inditex.mecc.mecprcc.api.avro.v1\",\"doc\":\"Class that holds a the attributes' texts for a Commercial Component and a locale\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"doc\":\"Type of attribute\",\"symbols\":[\"TAG\",\"LABEL\"]},{\"name\":\"code\",\"type\":\"string\",\"doc\":\"Attribute's unique identifier\"},{\"name\":\"values\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"AttributeValue\",\"doc\":\"Class that holds a the attributes' values for an Attribute a locale\",\"fields\":[{\"name\":\"locale\",\"type\":\"string\",\"doc\":\"Attribute's locale ISO Code\"},{\"name\":\"value\",\"type\":\"string\",\"doc\":\"Attribute's value text\"}]}},\"doc\":\"Map of attribute values per locale\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Attribute> ENCODER =
      new BinaryMessageEncoder<Attribute>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Attribute> DECODER =
      new BinaryMessageDecoder<Attribute>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Attribute> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Attribute> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Attribute>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Attribute to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Attribute from a ByteBuffer. */
  public static Attribute fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Type of attribute */
  @Deprecated public java.lang.CharSequence type;
  /** Attribute's unique identifier */
  @Deprecated public java.lang.CharSequence code;
  /** Map of attribute values per locale */
  @Deprecated public java.util.Map<java.lang.CharSequence,com.inditex.mecc.mecprcc.api.avro.v1.AttributeValue> values;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Attribute() {}

  /**
   * All-args constructor.
   * @param type Type of attribute
   * @param code Attribute's unique identifier
   * @param values Map of attribute values per locale
   */
  public Attribute(java.lang.CharSequence type, java.lang.CharSequence code, java.util.Map<java.lang.CharSequence,com.inditex.mecc.mecprcc.api.avro.v1.AttributeValue> values) {
    this.type = type;
    this.code = code;
    this.values = values;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return code;
    case 2: return values;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.CharSequence)value$; break;
    case 1: code = (java.lang.CharSequence)value$; break;
    case 2: values = (java.util.Map<java.lang.CharSequence,com.inditex.mecc.mecprcc.api.avro.v1.AttributeValue>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return Type of attribute
   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * Type of attribute
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return Attribute's unique identifier
   */
  public java.lang.CharSequence getCode() {
    return code;
  }

  /**
   * Sets the value of the 'code' field.
   * Attribute's unique identifier
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'values' field.
   * @return Map of attribute values per locale
   */
  public java.util.Map<java.lang.CharSequence,com.inditex.mecc.mecprcc.api.avro.v1.AttributeValue> getValues() {
    return values;
  }

  /**
   * Sets the value of the 'values' field.
   * Map of attribute values per locale
   * @param value the value to set.
   */
  public void setValues(java.util.Map<java.lang.CharSequence,com.inditex.mecc.mecprcc.api.avro.v1.AttributeValue> value) {
    this.values = value;
  }

  /**
   * Creates a new Attribute RecordBuilder.
   * @return A new Attribute RecordBuilder
   */
  public static com.inditex.mecc.mecprcc.api.avro.v1.Attribute.Builder newBuilder() {
    return new com.inditex.mecc.mecprcc.api.avro.v1.Attribute.Builder();
  }

  /**
   * Creates a new Attribute RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Attribute RecordBuilder
   */
  public static com.inditex.mecc.mecprcc.api.avro.v1.Attribute.Builder newBuilder(com.inditex.mecc.mecprcc.api.avro.v1.Attribute.Builder other) {
    return new com.inditex.mecc.mecprcc.api.avro.v1.Attribute.Builder(other);
  }

  /**
   * Creates a new Attribute RecordBuilder by copying an existing Attribute instance.
   * @param other The existing instance to copy.
   * @return A new Attribute RecordBuilder
   */
  public static com.inditex.mecc.mecprcc.api.avro.v1.Attribute.Builder newBuilder(com.inditex.mecc.mecprcc.api.avro.v1.Attribute other) {
    return new com.inditex.mecc.mecprcc.api.avro.v1.Attribute.Builder(other);
  }

  /**
   * RecordBuilder for Attribute instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Attribute>
    implements org.apache.avro.data.RecordBuilder<Attribute> {

    /** Type of attribute */
    private java.lang.CharSequence type;
    /** Attribute's unique identifier */
    private java.lang.CharSequence code;
    /** Map of attribute values per locale */
    private java.util.Map<java.lang.CharSequence,com.inditex.mecc.mecprcc.api.avro.v1.AttributeValue> values;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.mecprcc.api.avro.v1.Attribute.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.values)) {
        this.values = data().deepCopy(fields()[2].schema(), other.values);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Attribute instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.mecprcc.api.avro.v1.Attribute other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.values)) {
        this.values = data().deepCopy(fields()[2].schema(), other.values);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * Type of attribute
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * Type of attribute
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprcc.api.avro.v1.Attribute.Builder setType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Type of attribute
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * Type of attribute
      * @return This builder.
      */
    public com.inditex.mecc.mecprcc.api.avro.v1.Attribute.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * Attribute's unique identifier
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * Attribute's unique identifier
      * @param value The value of 'code'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprcc.api.avro.v1.Attribute.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.code = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * Attribute's unique identifier
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'code' field.
      * Attribute's unique identifier
      * @return This builder.
      */
    public com.inditex.mecc.mecprcc.api.avro.v1.Attribute.Builder clearCode() {
      code = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'values' field.
      * Map of attribute values per locale
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,com.inditex.mecc.mecprcc.api.avro.v1.AttributeValue> getValues() {
      return values;
    }

    /**
      * Sets the value of the 'values' field.
      * Map of attribute values per locale
      * @param value The value of 'values'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprcc.api.avro.v1.Attribute.Builder setValues(java.util.Map<java.lang.CharSequence,com.inditex.mecc.mecprcc.api.avro.v1.AttributeValue> value) {
      validate(fields()[2], value);
      this.values = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'values' field has been set.
      * Map of attribute values per locale
      * @return True if the 'values' field has been set, false otherwise.
      */
    public boolean hasValues() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'values' field.
      * Map of attribute values per locale
      * @return This builder.
      */
    public com.inditex.mecc.mecprcc.api.avro.v1.Attribute.Builder clearValues() {
      values = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Attribute build() {
      try {
        Attribute record = new Attribute();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.code = fieldSetFlags()[1] ? this.code : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.values = fieldSetFlags()[2] ? this.values : (java.util.Map<java.lang.CharSequence,com.inditex.mecc.mecprcc.api.avro.v1.AttributeValue>) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Attribute>
    WRITER$ = (org.apache.avro.io.DatumWriter<Attribute>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Attribute>
    READER$ = (org.apache.avro.io.DatumReader<Attribute>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
