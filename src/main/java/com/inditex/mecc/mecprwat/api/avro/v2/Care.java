/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.mecprwat.api.avro.v2;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Holds data of a single care and the colors where this care is used. */
@org.apache.avro.specific.AvroGenerated
public class Care extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3489727636714206494L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Care\",\"namespace\":\"com.inditex.mecc.mecprwat.api.avro.v2\",\"doc\":\"Holds data of a single care and the colors where this care is used.\",\"fields\":[{\"name\":\"care_id\",\"type\":\"long\",\"doc\":\"Care identifier.\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Defines the standard icon to represent the case.\"},{\"name\":\"care_type\",\"type\":\"long\",\"doc\":\"Care type identifier.\"},{\"name\":\"descriptions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"I18NText\",\"doc\":\"Class that holds a text and its locale ISO code.\",\"fields\":[{\"name\":\"iso_code\",\"type\":\"string\",\"doc\":\"Locale ISO code.\"},{\"name\":\"text\",\"type\":\"string\",\"doc\":\"Internationalized text.\"}]}},\"doc\":\"Contains internationalized care description.\",\"default\":[]},{\"name\":\"color_ids\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"Identifiers of affected colors.\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Care> ENCODER =
      new BinaryMessageEncoder<Care>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Care> DECODER =
      new BinaryMessageDecoder<Care>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Care> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Care> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Care> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Care>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Care to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Care from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Care instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Care fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Care identifier. */
  @Deprecated public long care_id;
  /** Defines the standard icon to represent the case. */
  @Deprecated public java.lang.CharSequence name;
  /** Care type identifier. */
  @Deprecated public long care_type;
  /** Contains internationalized care description. */
  @Deprecated public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> descriptions;
  /** Identifiers of affected colors. */
  @Deprecated public java.util.List<java.lang.CharSequence> color_ids;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Care() {}

  /**
   * All-args constructor.
   * @param care_id Care identifier.
   * @param name Defines the standard icon to represent the case.
   * @param care_type Care type identifier.
   * @param descriptions Contains internationalized care description.
   * @param color_ids Identifiers of affected colors.
   */
  public Care(java.lang.Long care_id, java.lang.CharSequence name, java.lang.Long care_type, java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> descriptions, java.util.List<java.lang.CharSequence> color_ids) {
    this.care_id = care_id;
    this.name = name;
    this.care_type = care_type;
    this.descriptions = descriptions;
    this.color_ids = color_ids;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return care_id;
    case 1: return name;
    case 2: return care_type;
    case 3: return descriptions;
    case 4: return color_ids;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: care_id = (java.lang.Long)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: care_type = (java.lang.Long)value$; break;
    case 3: descriptions = (java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>)value$; break;
    case 4: color_ids = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'care_id' field.
   * @return Care identifier.
   */
  public long getCareId() {
    return care_id;
  }


  /**
   * Sets the value of the 'care_id' field.
   * Care identifier.
   * @param value the value to set.
   */
  public void setCareId(long value) {
    this.care_id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return Defines the standard icon to represent the case.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * Defines the standard icon to represent the case.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'care_type' field.
   * @return Care type identifier.
   */
  public long getCareType() {
    return care_type;
  }


  /**
   * Sets the value of the 'care_type' field.
   * Care type identifier.
   * @param value the value to set.
   */
  public void setCareType(long value) {
    this.care_type = value;
  }

  /**
   * Gets the value of the 'descriptions' field.
   * @return Contains internationalized care description.
   */
  public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> getDescriptions() {
    return descriptions;
  }


  /**
   * Sets the value of the 'descriptions' field.
   * Contains internationalized care description.
   * @param value the value to set.
   */
  public void setDescriptions(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> value) {
    this.descriptions = value;
  }

  /**
   * Gets the value of the 'color_ids' field.
   * @return Identifiers of affected colors.
   */
  public java.util.List<java.lang.CharSequence> getColorIds() {
    return color_ids;
  }


  /**
   * Sets the value of the 'color_ids' field.
   * Identifiers of affected colors.
   * @param value the value to set.
   */
  public void setColorIds(java.util.List<java.lang.CharSequence> value) {
    this.color_ids = value;
  }

  /**
   * Creates a new Care RecordBuilder.
   * @return A new Care RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder newBuilder() {
    return new com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder();
  }

  /**
   * Creates a new Care RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Care RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder(other);
    }
  }

  /**
   * Creates a new Care RecordBuilder by copying an existing Care instance.
   * @param other The existing instance to copy.
   * @return A new Care RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Care other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder(other);
    }
  }

  /**
   * RecordBuilder for Care instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Care>
    implements org.apache.avro.data.RecordBuilder<Care> {

    /** Care identifier. */
    private long care_id;
    /** Defines the standard icon to represent the case. */
    private java.lang.CharSequence name;
    /** Care type identifier. */
    private long care_type;
    /** Contains internationalized care description. */
    private java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> descriptions;
    /** Identifiers of affected colors. */
    private java.util.List<java.lang.CharSequence> color_ids;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.care_id)) {
        this.care_id = data().deepCopy(fields()[0].schema(), other.care_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.care_type)) {
        this.care_type = data().deepCopy(fields()[2].schema(), other.care_type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.descriptions)) {
        this.descriptions = data().deepCopy(fields()[3].schema(), other.descriptions);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.color_ids)) {
        this.color_ids = data().deepCopy(fields()[4].schema(), other.color_ids);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Care instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Care other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.care_id)) {
        this.care_id = data().deepCopy(fields()[0].schema(), other.care_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.care_type)) {
        this.care_type = data().deepCopy(fields()[2].schema(), other.care_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.descriptions)) {
        this.descriptions = data().deepCopy(fields()[3].schema(), other.descriptions);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.color_ids)) {
        this.color_ids = data().deepCopy(fields()[4].schema(), other.color_ids);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'care_id' field.
      * Care identifier.
      * @return The value.
      */
    public long getCareId() {
      return care_id;
    }


    /**
      * Sets the value of the 'care_id' field.
      * Care identifier.
      * @param value The value of 'care_id'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder setCareId(long value) {
      validate(fields()[0], value);
      this.care_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'care_id' field has been set.
      * Care identifier.
      * @return True if the 'care_id' field has been set, false otherwise.
      */
    public boolean hasCareId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'care_id' field.
      * Care identifier.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder clearCareId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Defines the standard icon to represent the case.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * Defines the standard icon to represent the case.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Defines the standard icon to represent the case.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * Defines the standard icon to represent the case.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'care_type' field.
      * Care type identifier.
      * @return The value.
      */
    public long getCareType() {
      return care_type;
    }


    /**
      * Sets the value of the 'care_type' field.
      * Care type identifier.
      * @param value The value of 'care_type'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder setCareType(long value) {
      validate(fields()[2], value);
      this.care_type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'care_type' field has been set.
      * Care type identifier.
      * @return True if the 'care_type' field has been set, false otherwise.
      */
    public boolean hasCareType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'care_type' field.
      * Care type identifier.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder clearCareType() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'descriptions' field.
      * Contains internationalized care description.
      * @return The value.
      */
    public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> getDescriptions() {
      return descriptions;
    }


    /**
      * Sets the value of the 'descriptions' field.
      * Contains internationalized care description.
      * @param value The value of 'descriptions'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder setDescriptions(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> value) {
      validate(fields()[3], value);
      this.descriptions = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'descriptions' field has been set.
      * Contains internationalized care description.
      * @return True if the 'descriptions' field has been set, false otherwise.
      */
    public boolean hasDescriptions() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'descriptions' field.
      * Contains internationalized care description.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder clearDescriptions() {
      descriptions = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'color_ids' field.
      * Identifiers of affected colors.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getColorIds() {
      return color_ids;
    }


    /**
      * Sets the value of the 'color_ids' field.
      * Identifiers of affected colors.
      * @param value The value of 'color_ids'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder setColorIds(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.color_ids = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'color_ids' field has been set.
      * Identifiers of affected colors.
      * @return True if the 'color_ids' field has been set, false otherwise.
      */
    public boolean hasColorIds() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'color_ids' field.
      * Identifiers of affected colors.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Care.Builder clearColorIds() {
      color_ids = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Care build() {
      try {
        Care record = new Care();
        record.care_id = fieldSetFlags()[0] ? this.care_id : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.care_type = fieldSetFlags()[2] ? this.care_type : (java.lang.Long) defaultValue(fields()[2]);
        record.descriptions = fieldSetFlags()[3] ? this.descriptions : (java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>) defaultValue(fields()[3]);
        record.color_ids = fieldSetFlags()[4] ? this.color_ids : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Care>
    WRITER$ = (org.apache.avro.io.DatumWriter<Care>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Care>
    READER$ = (org.apache.avro.io.DatumReader<Care>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.care_id);

    out.writeString(this.name);

    out.writeLong(this.care_type);

    long size0 = this.descriptions.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.inditex.mecc.mecprwat.api.avro.v2.I18NText e0: this.descriptions) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.color_ids.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.CharSequence e1: this.color_ids) {
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.care_id = in.readLong();

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.care_type = in.readLong();

      long size0 = in.readArrayStart();
      java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> a0 = this.descriptions;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>((int)size0, SCHEMA$.getField("descriptions").schema());
        this.descriptions = a0;
      } else a0.clear();
      SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.inditex.mecc.mecprwat.api.avro.v2.I18NText e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.inditex.mecc.mecprwat.api.avro.v2.I18NText();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a1 = this.color_ids;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("color_ids").schema());
        this.color_ids = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.care_id = in.readLong();
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 2:
          this.care_type = in.readLong();
          break;

        case 3:
          long size0 = in.readArrayStart();
          java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> a0 = this.descriptions;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>((int)size0, SCHEMA$.getField("descriptions").schema());
            this.descriptions = a0;
          } else a0.clear();
          SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.inditex.mecc.mecprwat.api.avro.v2.I18NText e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.inditex.mecc.mecprwat.api.avro.v2.I18NText();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 4:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a1 = this.color_ids;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("color_ids").schema());
            this.color_ids = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










