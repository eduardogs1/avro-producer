/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.mecprwat.api.avro.v2;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Class that holds an array with composition's info for all available languages on a given store for a specific model-quality reference */
@org.apache.avro.specific.AvroGenerated
public class ItemComposition extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6312005071974474243L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ItemComposition\",\"namespace\":\"com.inditex.mecc.mecprwat.api.avro.v2\",\"doc\":\"Class that holds an array with composition's info for all available languages on a given store for a specific model-quality reference\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Id of the item composition\"},{\"name\":\"labels\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"I18NText\",\"doc\":\"Class that holds a text and its locale ISO code.\",\"fields\":[{\"name\":\"iso_code\",\"type\":\"string\",\"doc\":\"Locale ISO code.\"},{\"name\":\"text\",\"type\":\"string\",\"doc\":\"Internationalized text.\"}]}},\"doc\":\"Internationalized composition's info json.\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ItemComposition> ENCODER =
      new BinaryMessageEncoder<ItemComposition>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ItemComposition> DECODER =
      new BinaryMessageDecoder<ItemComposition>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ItemComposition> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ItemComposition> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ItemComposition> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ItemComposition>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ItemComposition to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ItemComposition from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ItemComposition instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ItemComposition fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Id of the item composition */
  @Deprecated public long id;
  /** Internationalized composition's info json. */
  @Deprecated public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> labels;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ItemComposition() {}

  /**
   * All-args constructor.
   * @param id Id of the item composition
   * @param labels Internationalized composition's info json.
   */
  public ItemComposition(java.lang.Long id, java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> labels) {
    this.id = id;
    this.labels = labels;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return labels;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: labels = (java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Id of the item composition
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Id of the item composition
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'labels' field.
   * @return Internationalized composition's info json.
   */
  public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> getLabels() {
    return labels;
  }


  /**
   * Sets the value of the 'labels' field.
   * Internationalized composition's info json.
   * @param value the value to set.
   */
  public void setLabels(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> value) {
    this.labels = value;
  }

  /**
   * Creates a new ItemComposition RecordBuilder.
   * @return A new ItemComposition RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition.Builder newBuilder() {
    return new com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition.Builder();
  }

  /**
   * Creates a new ItemComposition RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ItemComposition RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition.Builder other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition.Builder(other);
    }
  }

  /**
   * Creates a new ItemComposition RecordBuilder by copying an existing ItemComposition instance.
   * @param other The existing instance to copy.
   * @return A new ItemComposition RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition.Builder(other);
    }
  }

  /**
   * RecordBuilder for ItemComposition instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ItemComposition>
    implements org.apache.avro.data.RecordBuilder<ItemComposition> {

    /** Id of the item composition */
    private long id;
    /** Internationalized composition's info json. */
    private java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> labels;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.labels)) {
        this.labels = data().deepCopy(fields()[1].schema(), other.labels);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing ItemComposition instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.labels)) {
        this.labels = data().deepCopy(fields()[1].schema(), other.labels);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Id of the item composition
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Id of the item composition
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Id of the item composition
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Id of the item composition
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'labels' field.
      * Internationalized composition's info json.
      * @return The value.
      */
    public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> getLabels() {
      return labels;
    }


    /**
      * Sets the value of the 'labels' field.
      * Internationalized composition's info json.
      * @param value The value of 'labels'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition.Builder setLabels(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> value) {
      validate(fields()[1], value);
      this.labels = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'labels' field has been set.
      * Internationalized composition's info json.
      * @return True if the 'labels' field has been set, false otherwise.
      */
    public boolean hasLabels() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'labels' field.
      * Internationalized composition's info json.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.ItemComposition.Builder clearLabels() {
      labels = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ItemComposition build() {
      try {
        ItemComposition record = new ItemComposition();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.labels = fieldSetFlags()[1] ? this.labels : (java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ItemComposition>
    WRITER$ = (org.apache.avro.io.DatumWriter<ItemComposition>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ItemComposition>
    READER$ = (org.apache.avro.io.DatumReader<ItemComposition>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    long size0 = this.labels.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.inditex.mecc.mecprwat.api.avro.v2.I18NText e0: this.labels) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      long size0 = in.readArrayStart();
      java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> a0 = this.labels;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>((int)size0, SCHEMA$.getField("labels").schema());
        this.labels = a0;
      } else a0.clear();
      SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.inditex.mecc.mecprwat.api.avro.v2.I18NText e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.inditex.mecc.mecprwat.api.avro.v2.I18NText();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> a0 = this.labels;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>((int)size0, SCHEMA$.getField("labels").schema());
            this.labels = a0;
          } else a0.clear();
          SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.inditex.mecc.mecprwat.api.avro.v2.I18NText e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.inditex.mecc.mecprwat.api.avro.v2.I18NText();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










