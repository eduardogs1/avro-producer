/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.mecprwat.api.avro.v2;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Class that holds size's information. */
@org.apache.avro.specific.AvroGenerated
public class Size extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6774179566761167434L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Size\",\"namespace\":\"com.inditex.mecc.mecprwat.api.avro.v2\",\"doc\":\"Class that holds size's information.\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Size's identifier.\"},{\"name\":\"size_name\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"I18NText\",\"doc\":\"Class that holds a text and its locale ISO code.\",\"fields\":[{\"name\":\"iso_code\",\"type\":\"string\",\"doc\":\"Locale ISO code.\"},{\"name\":\"text\",\"type\":\"string\",\"doc\":\"Internationalized text.\"}]}},\"doc\":\"Size's name in a bunch of locales.\",\"default\":[]},{\"name\":\"position\",\"type\":\"int\",\"doc\":\"Occupied position in the size list.\"},{\"name\":\"equivalent_id\",\"type\":\"int\",\"doc\":\"Equivalent to size identifier but support multiples sizes for the same sku.\"},{\"name\":\"size_fit\",\"type\":\"string\",\"doc\":\"Indicate particularities about the size\"},{\"name\":\"size_value\",\"type\":[\"null\",\"string\"],\"doc\":\"Indicates size value description\",\"default\":null},{\"name\":\"size_short_description\",\"type\":{\"type\":\"array\",\"items\":\"I18NText\"},\"doc\":\"Size's short description in a bunch of locales.\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Size> ENCODER =
      new BinaryMessageEncoder<Size>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Size> DECODER =
      new BinaryMessageDecoder<Size>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Size> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Size> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Size> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Size>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Size to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Size from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Size instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Size fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Size's identifier. */
  @Deprecated public long id;
  /** Size's name in a bunch of locales. */
  @Deprecated public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> size_name;
  /** Occupied position in the size list. */
  @Deprecated public int position;
  /** Equivalent to size identifier but support multiples sizes for the same sku. */
  @Deprecated public int equivalent_id;
  /** Indicate particularities about the size */
  @Deprecated public java.lang.CharSequence size_fit;
  /** Indicates size value description */
  @Deprecated public java.lang.CharSequence size_value;
  /** Size's short description in a bunch of locales. */
  @Deprecated public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> size_short_description;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Size() {}

  /**
   * All-args constructor.
   * @param id Size's identifier.
   * @param size_name Size's name in a bunch of locales.
   * @param position Occupied position in the size list.
   * @param equivalent_id Equivalent to size identifier but support multiples sizes for the same sku.
   * @param size_fit Indicate particularities about the size
   * @param size_value Indicates size value description
   * @param size_short_description Size's short description in a bunch of locales.
   */
  public Size(java.lang.Long id, java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> size_name, java.lang.Integer position, java.lang.Integer equivalent_id, java.lang.CharSequence size_fit, java.lang.CharSequence size_value, java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> size_short_description) {
    this.id = id;
    this.size_name = size_name;
    this.position = position;
    this.equivalent_id = equivalent_id;
    this.size_fit = size_fit;
    this.size_value = size_value;
    this.size_short_description = size_short_description;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return size_name;
    case 2: return position;
    case 3: return equivalent_id;
    case 4: return size_fit;
    case 5: return size_value;
    case 6: return size_short_description;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: size_name = (java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>)value$; break;
    case 2: position = (java.lang.Integer)value$; break;
    case 3: equivalent_id = (java.lang.Integer)value$; break;
    case 4: size_fit = (java.lang.CharSequence)value$; break;
    case 5: size_value = (java.lang.CharSequence)value$; break;
    case 6: size_short_description = (java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Size's identifier.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Size's identifier.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'size_name' field.
   * @return Size's name in a bunch of locales.
   */
  public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> getSizeName() {
    return size_name;
  }


  /**
   * Sets the value of the 'size_name' field.
   * Size's name in a bunch of locales.
   * @param value the value to set.
   */
  public void setSizeName(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> value) {
    this.size_name = value;
  }

  /**
   * Gets the value of the 'position' field.
   * @return Occupied position in the size list.
   */
  public int getPosition() {
    return position;
  }


  /**
   * Sets the value of the 'position' field.
   * Occupied position in the size list.
   * @param value the value to set.
   */
  public void setPosition(int value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'equivalent_id' field.
   * @return Equivalent to size identifier but support multiples sizes for the same sku.
   */
  public int getEquivalentId() {
    return equivalent_id;
  }


  /**
   * Sets the value of the 'equivalent_id' field.
   * Equivalent to size identifier but support multiples sizes for the same sku.
   * @param value the value to set.
   */
  public void setEquivalentId(int value) {
    this.equivalent_id = value;
  }

  /**
   * Gets the value of the 'size_fit' field.
   * @return Indicate particularities about the size
   */
  public java.lang.CharSequence getSizeFit() {
    return size_fit;
  }


  /**
   * Sets the value of the 'size_fit' field.
   * Indicate particularities about the size
   * @param value the value to set.
   */
  public void setSizeFit(java.lang.CharSequence value) {
    this.size_fit = value;
  }

  /**
   * Gets the value of the 'size_value' field.
   * @return Indicates size value description
   */
  public java.lang.CharSequence getSizeValue() {
    return size_value;
  }


  /**
   * Sets the value of the 'size_value' field.
   * Indicates size value description
   * @param value the value to set.
   */
  public void setSizeValue(java.lang.CharSequence value) {
    this.size_value = value;
  }

  /**
   * Gets the value of the 'size_short_description' field.
   * @return Size's short description in a bunch of locales.
   */
  public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> getSizeShortDescription() {
    return size_short_description;
  }


  /**
   * Sets the value of the 'size_short_description' field.
   * Size's short description in a bunch of locales.
   * @param value the value to set.
   */
  public void setSizeShortDescription(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> value) {
    this.size_short_description = value;
  }

  /**
   * Creates a new Size RecordBuilder.
   * @return A new Size RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder newBuilder() {
    return new com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder();
  }

  /**
   * Creates a new Size RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Size RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder(other);
    }
  }

  /**
   * Creates a new Size RecordBuilder by copying an existing Size instance.
   * @param other The existing instance to copy.
   * @return A new Size RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Size other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder(other);
    }
  }

  /**
   * RecordBuilder for Size instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Size>
    implements org.apache.avro.data.RecordBuilder<Size> {

    /** Size's identifier. */
    private long id;
    /** Size's name in a bunch of locales. */
    private java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> size_name;
    /** Occupied position in the size list. */
    private int position;
    /** Equivalent to size identifier but support multiples sizes for the same sku. */
    private int equivalent_id;
    /** Indicate particularities about the size */
    private java.lang.CharSequence size_fit;
    /** Indicates size value description */
    private java.lang.CharSequence size_value;
    /** Size's short description in a bunch of locales. */
    private java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> size_short_description;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.size_name)) {
        this.size_name = data().deepCopy(fields()[1].schema(), other.size_name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.position)) {
        this.position = data().deepCopy(fields()[2].schema(), other.position);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.equivalent_id)) {
        this.equivalent_id = data().deepCopy(fields()[3].schema(), other.equivalent_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.size_fit)) {
        this.size_fit = data().deepCopy(fields()[4].schema(), other.size_fit);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.size_value)) {
        this.size_value = data().deepCopy(fields()[5].schema(), other.size_value);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.size_short_description)) {
        this.size_short_description = data().deepCopy(fields()[6].schema(), other.size_short_description);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Size instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Size other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.size_name)) {
        this.size_name = data().deepCopy(fields()[1].schema(), other.size_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.position)) {
        this.position = data().deepCopy(fields()[2].schema(), other.position);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.equivalent_id)) {
        this.equivalent_id = data().deepCopy(fields()[3].schema(), other.equivalent_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.size_fit)) {
        this.size_fit = data().deepCopy(fields()[4].schema(), other.size_fit);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.size_value)) {
        this.size_value = data().deepCopy(fields()[5].schema(), other.size_value);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.size_short_description)) {
        this.size_short_description = data().deepCopy(fields()[6].schema(), other.size_short_description);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Size's identifier.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Size's identifier.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Size's identifier.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Size's identifier.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'size_name' field.
      * Size's name in a bunch of locales.
      * @return The value.
      */
    public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> getSizeName() {
      return size_name;
    }


    /**
      * Sets the value of the 'size_name' field.
      * Size's name in a bunch of locales.
      * @param value The value of 'size_name'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder setSizeName(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> value) {
      validate(fields()[1], value);
      this.size_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'size_name' field has been set.
      * Size's name in a bunch of locales.
      * @return True if the 'size_name' field has been set, false otherwise.
      */
    public boolean hasSizeName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'size_name' field.
      * Size's name in a bunch of locales.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder clearSizeName() {
      size_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'position' field.
      * Occupied position in the size list.
      * @return The value.
      */
    public int getPosition() {
      return position;
    }


    /**
      * Sets the value of the 'position' field.
      * Occupied position in the size list.
      * @param value The value of 'position'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder setPosition(int value) {
      validate(fields()[2], value);
      this.position = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'position' field has been set.
      * Occupied position in the size list.
      * @return True if the 'position' field has been set, false otherwise.
      */
    public boolean hasPosition() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'position' field.
      * Occupied position in the size list.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder clearPosition() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'equivalent_id' field.
      * Equivalent to size identifier but support multiples sizes for the same sku.
      * @return The value.
      */
    public int getEquivalentId() {
      return equivalent_id;
    }


    /**
      * Sets the value of the 'equivalent_id' field.
      * Equivalent to size identifier but support multiples sizes for the same sku.
      * @param value The value of 'equivalent_id'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder setEquivalentId(int value) {
      validate(fields()[3], value);
      this.equivalent_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'equivalent_id' field has been set.
      * Equivalent to size identifier but support multiples sizes for the same sku.
      * @return True if the 'equivalent_id' field has been set, false otherwise.
      */
    public boolean hasEquivalentId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'equivalent_id' field.
      * Equivalent to size identifier but support multiples sizes for the same sku.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder clearEquivalentId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'size_fit' field.
      * Indicate particularities about the size
      * @return The value.
      */
    public java.lang.CharSequence getSizeFit() {
      return size_fit;
    }


    /**
      * Sets the value of the 'size_fit' field.
      * Indicate particularities about the size
      * @param value The value of 'size_fit'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder setSizeFit(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.size_fit = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'size_fit' field has been set.
      * Indicate particularities about the size
      * @return True if the 'size_fit' field has been set, false otherwise.
      */
    public boolean hasSizeFit() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'size_fit' field.
      * Indicate particularities about the size
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder clearSizeFit() {
      size_fit = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'size_value' field.
      * Indicates size value description
      * @return The value.
      */
    public java.lang.CharSequence getSizeValue() {
      return size_value;
    }


    /**
      * Sets the value of the 'size_value' field.
      * Indicates size value description
      * @param value The value of 'size_value'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder setSizeValue(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.size_value = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'size_value' field has been set.
      * Indicates size value description
      * @return True if the 'size_value' field has been set, false otherwise.
      */
    public boolean hasSizeValue() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'size_value' field.
      * Indicates size value description
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder clearSizeValue() {
      size_value = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'size_short_description' field.
      * Size's short description in a bunch of locales.
      * @return The value.
      */
    public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> getSizeShortDescription() {
      return size_short_description;
    }


    /**
      * Sets the value of the 'size_short_description' field.
      * Size's short description in a bunch of locales.
      * @param value The value of 'size_short_description'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder setSizeShortDescription(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> value) {
      validate(fields()[6], value);
      this.size_short_description = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'size_short_description' field has been set.
      * Size's short description in a bunch of locales.
      * @return True if the 'size_short_description' field has been set, false otherwise.
      */
    public boolean hasSizeShortDescription() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'size_short_description' field.
      * Size's short description in a bunch of locales.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Size.Builder clearSizeShortDescription() {
      size_short_description = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Size build() {
      try {
        Size record = new Size();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.size_name = fieldSetFlags()[1] ? this.size_name : (java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>) defaultValue(fields()[1]);
        record.position = fieldSetFlags()[2] ? this.position : (java.lang.Integer) defaultValue(fields()[2]);
        record.equivalent_id = fieldSetFlags()[3] ? this.equivalent_id : (java.lang.Integer) defaultValue(fields()[3]);
        record.size_fit = fieldSetFlags()[4] ? this.size_fit : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.size_value = fieldSetFlags()[5] ? this.size_value : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.size_short_description = fieldSetFlags()[6] ? this.size_short_description : (java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Size>
    WRITER$ = (org.apache.avro.io.DatumWriter<Size>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Size>
    READER$ = (org.apache.avro.io.DatumReader<Size>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    long size0 = this.size_name.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.inditex.mecc.mecprwat.api.avro.v2.I18NText e0: this.size_name) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeInt(this.position);

    out.writeInt(this.equivalent_id);

    out.writeString(this.size_fit);

    if (this.size_value == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.size_value);
    }

    long size1 = this.size_short_description.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (com.inditex.mecc.mecprwat.api.avro.v2.I18NText e1: this.size_short_description) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      long size0 = in.readArrayStart();
      java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> a0 = this.size_name;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>((int)size0, SCHEMA$.getField("size_name").schema());
        this.size_name = a0;
      } else a0.clear();
      SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.inditex.mecc.mecprwat.api.avro.v2.I18NText e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.inditex.mecc.mecprwat.api.avro.v2.I18NText();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      this.position = in.readInt();

      this.equivalent_id = in.readInt();

      this.size_fit = in.readString(this.size_fit instanceof Utf8 ? (Utf8)this.size_fit : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.size_value = null;
      } else {
        this.size_value = in.readString(this.size_value instanceof Utf8 ? (Utf8)this.size_value : null);
      }

      long size1 = in.readArrayStart();
      java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> a1 = this.size_short_description;
      if (a1 == null) {
        a1 = new SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>((int)size1, SCHEMA$.getField("size_short_description").schema());
        this.size_short_description = a1;
      } else a1.clear();
      SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          com.inditex.mecc.mecprwat.api.avro.v2.I18NText e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new com.inditex.mecc.mecprwat.api.avro.v2.I18NText();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> a0 = this.size_name;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>((int)size0, SCHEMA$.getField("size_name").schema());
            this.size_name = a0;
          } else a0.clear();
          SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.inditex.mecc.mecprwat.api.avro.v2.I18NText e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.inditex.mecc.mecprwat.api.avro.v2.I18NText();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 2:
          this.position = in.readInt();
          break;

        case 3:
          this.equivalent_id = in.readInt();
          break;

        case 4:
          this.size_fit = in.readString(this.size_fit instanceof Utf8 ? (Utf8)this.size_fit : null);
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.size_value = null;
          } else {
            this.size_value = in.readString(this.size_value instanceof Utf8 ? (Utf8)this.size_value : null);
          }
          break;

        case 6:
          long size1 = in.readArrayStart();
          java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> a1 = this.size_short_description;
          if (a1 == null) {
            a1 = new SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>((int)size1, SCHEMA$.getField("size_short_description").schema());
            this.size_short_description = a1;
          } else a1.clear();
          SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              com.inditex.mecc.mecprwat.api.avro.v2.I18NText e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new com.inditex.mecc.mecprwat.api.avro.v2.I18NText();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










