/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.mecprwat.api.avro.v2;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Class that holds price information for a given period of time. */
@org.apache.avro.specific.AvroGenerated
public class Price extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7740203666948899087L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Price\",\"namespace\":\"com.inditex.mecc.mecprwat.api.avro.v2\",\"doc\":\"Class that holds price information for a given period of time.\",\"fields\":[{\"name\":\"start_date\",\"type\":\"long\",\"doc\":\"Starting period date in milliseconds since epoch time where the price becomes valid.\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"end_date\",\"type\":\"long\",\"doc\":\"Ending period date in milliseconds since epoch time where the price stops being valid.\",\"order\":\"ignore\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"price\",\"type\":\"long\",\"doc\":\"Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).\",\"order\":\"ignore\"},{\"name\":\"old_price\",\"type\":[\"null\",\"long\"],\"doc\":\"Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.\",\"order\":\"ignore\"},{\"name\":\"currency_iso\",\"type\":\"string\",\"doc\":\"Currency ISO 4217 code.\",\"order\":\"ignore\"},{\"name\":\"promotion\",\"type\":[\"null\",\"string\"],\"doc\":\"Price promotion information. This value will not be set on a regular price but will be set instead on sales and event prices.\",\"default\":null,\"order\":\"ignore\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Price> ENCODER =
      new BinaryMessageEncoder<Price>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Price> DECODER =
      new BinaryMessageDecoder<Price>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Price> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Price> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Price> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Price>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Price to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Price from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Price instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Price fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Starting period date in milliseconds since epoch time where the price becomes valid. */
  @Deprecated public long start_date;
  /** Ending period date in milliseconds since epoch time where the price stops being valid. */
  @Deprecated public long end_date;
  /** Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). */
  @Deprecated public long price;
  /** Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales. */
  @Deprecated public java.lang.Long old_price;
  /** Currency ISO 4217 code. */
  @Deprecated public java.lang.CharSequence currency_iso;
  /** Price promotion information. This value will not be set on a regular price but will be set instead on sales and event prices. */
  @Deprecated public java.lang.CharSequence promotion;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Price() {}

  /**
   * All-args constructor.
   * @param start_date Starting period date in milliseconds since epoch time where the price becomes valid.
   * @param end_date Ending period date in milliseconds since epoch time where the price stops being valid.
   * @param price Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).
   * @param old_price Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.
   * @param currency_iso Currency ISO 4217 code.
   * @param promotion Price promotion information. This value will not be set on a regular price but will be set instead on sales and event prices.
   */
  public Price(java.lang.Long start_date, java.lang.Long end_date, java.lang.Long price, java.lang.Long old_price, java.lang.CharSequence currency_iso, java.lang.CharSequence promotion) {
    this.start_date = start_date;
    this.end_date = end_date;
    this.price = price;
    this.old_price = old_price;
    this.currency_iso = currency_iso;
    this.promotion = promotion;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return start_date;
    case 1: return end_date;
    case 2: return price;
    case 3: return old_price;
    case 4: return currency_iso;
    case 5: return promotion;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: start_date = (java.lang.Long)value$; break;
    case 1: end_date = (java.lang.Long)value$; break;
    case 2: price = (java.lang.Long)value$; break;
    case 3: old_price = (java.lang.Long)value$; break;
    case 4: currency_iso = (java.lang.CharSequence)value$; break;
    case 5: promotion = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'start_date' field.
   * @return Starting period date in milliseconds since epoch time where the price becomes valid.
   */
  public long getStartDate() {
    return start_date;
  }


  /**
   * Sets the value of the 'start_date' field.
   * Starting period date in milliseconds since epoch time where the price becomes valid.
   * @param value the value to set.
   */
  public void setStartDate(long value) {
    this.start_date = value;
  }

  /**
   * Gets the value of the 'end_date' field.
   * @return Ending period date in milliseconds since epoch time where the price stops being valid.
   */
  public long getEndDate() {
    return end_date;
  }


  /**
   * Sets the value of the 'end_date' field.
   * Ending period date in milliseconds since epoch time where the price stops being valid.
   * @param value the value to set.
   */
  public void setEndDate(long value) {
    this.end_date = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).
   */
  public long getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).
   * @param value the value to set.
   */
  public void setPrice(long value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'old_price' field.
   * @return Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.
   */
  public java.lang.Long getOldPrice() {
    return old_price;
  }


  /**
   * Sets the value of the 'old_price' field.
   * Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.
   * @param value the value to set.
   */
  public void setOldPrice(java.lang.Long value) {
    this.old_price = value;
  }

  /**
   * Gets the value of the 'currency_iso' field.
   * @return Currency ISO 4217 code.
   */
  public java.lang.CharSequence getCurrencyIso() {
    return currency_iso;
  }


  /**
   * Sets the value of the 'currency_iso' field.
   * Currency ISO 4217 code.
   * @param value the value to set.
   */
  public void setCurrencyIso(java.lang.CharSequence value) {
    this.currency_iso = value;
  }

  /**
   * Gets the value of the 'promotion' field.
   * @return Price promotion information. This value will not be set on a regular price but will be set instead on sales and event prices.
   */
  public java.lang.CharSequence getPromotion() {
    return promotion;
  }


  /**
   * Sets the value of the 'promotion' field.
   * Price promotion information. This value will not be set on a regular price but will be set instead on sales and event prices.
   * @param value the value to set.
   */
  public void setPromotion(java.lang.CharSequence value) {
    this.promotion = value;
  }

  /**
   * Creates a new Price RecordBuilder.
   * @return A new Price RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder newBuilder() {
    return new com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder();
  }

  /**
   * Creates a new Price RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Price RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder(other);
    }
  }

  /**
   * Creates a new Price RecordBuilder by copying an existing Price instance.
   * @param other The existing instance to copy.
   * @return A new Price RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Price other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder(other);
    }
  }

  /**
   * RecordBuilder for Price instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Price>
    implements org.apache.avro.data.RecordBuilder<Price> {

    /** Starting period date in milliseconds since epoch time where the price becomes valid. */
    private long start_date;
    /** Ending period date in milliseconds since epoch time where the price stops being valid. */
    private long end_date;
    /** Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). */
    private long price;
    /** Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales. */
    private java.lang.Long old_price;
    /** Currency ISO 4217 code. */
    private java.lang.CharSequence currency_iso;
    /** Price promotion information. This value will not be set on a regular price but will be set instead on sales and event prices. */
    private java.lang.CharSequence promotion;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.start_date)) {
        this.start_date = data().deepCopy(fields()[0].schema(), other.start_date);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.end_date)) {
        this.end_date = data().deepCopy(fields()[1].schema(), other.end_date);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.old_price)) {
        this.old_price = data().deepCopy(fields()[3].schema(), other.old_price);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.currency_iso)) {
        this.currency_iso = data().deepCopy(fields()[4].schema(), other.currency_iso);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.promotion)) {
        this.promotion = data().deepCopy(fields()[5].schema(), other.promotion);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Price instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Price other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.start_date)) {
        this.start_date = data().deepCopy(fields()[0].schema(), other.start_date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.end_date)) {
        this.end_date = data().deepCopy(fields()[1].schema(), other.end_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.old_price)) {
        this.old_price = data().deepCopy(fields()[3].schema(), other.old_price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.currency_iso)) {
        this.currency_iso = data().deepCopy(fields()[4].schema(), other.currency_iso);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.promotion)) {
        this.promotion = data().deepCopy(fields()[5].schema(), other.promotion);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'start_date' field.
      * Starting period date in milliseconds since epoch time where the price becomes valid.
      * @return The value.
      */
    public long getStartDate() {
      return start_date;
    }


    /**
      * Sets the value of the 'start_date' field.
      * Starting period date in milliseconds since epoch time where the price becomes valid.
      * @param value The value of 'start_date'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder setStartDate(long value) {
      validate(fields()[0], value);
      this.start_date = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'start_date' field has been set.
      * Starting period date in milliseconds since epoch time where the price becomes valid.
      * @return True if the 'start_date' field has been set, false otherwise.
      */
    public boolean hasStartDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'start_date' field.
      * Starting period date in milliseconds since epoch time where the price becomes valid.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder clearStartDate() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'end_date' field.
      * Ending period date in milliseconds since epoch time where the price stops being valid.
      * @return The value.
      */
    public long getEndDate() {
      return end_date;
    }


    /**
      * Sets the value of the 'end_date' field.
      * Ending period date in milliseconds since epoch time where the price stops being valid.
      * @param value The value of 'end_date'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder setEndDate(long value) {
      validate(fields()[1], value);
      this.end_date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'end_date' field has been set.
      * Ending period date in milliseconds since epoch time where the price stops being valid.
      * @return True if the 'end_date' field has been set, false otherwise.
      */
    public boolean hasEndDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'end_date' field.
      * Ending period date in milliseconds since epoch time where the price stops being valid.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder clearEndDate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).
      * @return The value.
      */
    public long getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder setPrice(long value) {
      validate(fields()[2], value);
      this.price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'price' field.
      * Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder clearPrice() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'old_price' field.
      * Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.
      * @return The value.
      */
    public java.lang.Long getOldPrice() {
      return old_price;
    }


    /**
      * Sets the value of the 'old_price' field.
      * Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.
      * @param value The value of 'old_price'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder setOldPrice(java.lang.Long value) {
      validate(fields()[3], value);
      this.old_price = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'old_price' field has been set.
      * Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.
      * @return True if the 'old_price' field has been set, false otherwise.
      */
    public boolean hasOldPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'old_price' field.
      * Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder clearOldPrice() {
      old_price = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency_iso' field.
      * Currency ISO 4217 code.
      * @return The value.
      */
    public java.lang.CharSequence getCurrencyIso() {
      return currency_iso;
    }


    /**
      * Sets the value of the 'currency_iso' field.
      * Currency ISO 4217 code.
      * @param value The value of 'currency_iso'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder setCurrencyIso(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.currency_iso = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'currency_iso' field has been set.
      * Currency ISO 4217 code.
      * @return True if the 'currency_iso' field has been set, false otherwise.
      */
    public boolean hasCurrencyIso() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'currency_iso' field.
      * Currency ISO 4217 code.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder clearCurrencyIso() {
      currency_iso = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'promotion' field.
      * Price promotion information. This value will not be set on a regular price but will be set instead on sales and event prices.
      * @return The value.
      */
    public java.lang.CharSequence getPromotion() {
      return promotion;
    }


    /**
      * Sets the value of the 'promotion' field.
      * Price promotion information. This value will not be set on a regular price but will be set instead on sales and event prices.
      * @param value The value of 'promotion'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder setPromotion(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.promotion = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'promotion' field has been set.
      * Price promotion information. This value will not be set on a regular price but will be set instead on sales and event prices.
      * @return True if the 'promotion' field has been set, false otherwise.
      */
    public boolean hasPromotion() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'promotion' field.
      * Price promotion information. This value will not be set on a regular price but will be set instead on sales and event prices.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Price.Builder clearPromotion() {
      promotion = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Price build() {
      try {
        Price record = new Price();
        record.start_date = fieldSetFlags()[0] ? this.start_date : (java.lang.Long) defaultValue(fields()[0]);
        record.end_date = fieldSetFlags()[1] ? this.end_date : (java.lang.Long) defaultValue(fields()[1]);
        record.price = fieldSetFlags()[2] ? this.price : (java.lang.Long) defaultValue(fields()[2]);
        record.old_price = fieldSetFlags()[3] ? this.old_price : (java.lang.Long) defaultValue(fields()[3]);
        record.currency_iso = fieldSetFlags()[4] ? this.currency_iso : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.promotion = fieldSetFlags()[5] ? this.promotion : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Price>
    WRITER$ = (org.apache.avro.io.DatumWriter<Price>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Price>
    READER$ = (org.apache.avro.io.DatumReader<Price>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.start_date);

    out.writeLong(this.end_date);

    out.writeLong(this.price);

    if (this.old_price == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.old_price);
    }

    out.writeString(this.currency_iso);

    if (this.promotion == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.promotion);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.start_date = in.readLong();

      this.end_date = in.readLong();

      this.price = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.old_price = null;
      } else {
        this.old_price = in.readLong();
      }

      this.currency_iso = in.readString(this.currency_iso instanceof Utf8 ? (Utf8)this.currency_iso : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.promotion = null;
      } else {
        this.promotion = in.readString(this.promotion instanceof Utf8 ? (Utf8)this.promotion : null);
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.start_date = in.readLong();
          break;

        case 1:
          this.end_date = in.readLong();
          break;

        case 2:
          this.price = in.readLong();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.old_price = null;
          } else {
            this.old_price = in.readLong();
          }
          break;

        case 4:
          this.currency_iso = in.readString(this.currency_iso instanceof Utf8 ? (Utf8)this.currency_iso : null);
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.promotion = null;
          } else {
            this.promotion = in.readString(this.promotion instanceof Utf8 ? (Utf8)this.promotion : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










