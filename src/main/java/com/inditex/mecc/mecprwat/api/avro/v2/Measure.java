/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.mecprwat.api.avro.v2;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Class that holds the information about an individual measure. */
@org.apache.avro.specific.AvroGenerated
public class Measure extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3269581297601423412L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Measure\",\"namespace\":\"com.inditex.mecc.mecprwat.api.avro.v2\",\"doc\":\"Class that holds the information about an individual measure.\",\"fields\":[{\"name\":\"kind\",\"type\":\"string\",\"doc\":\"Kind of measure [weight, length, width, height]\"},{\"name\":\"unit\",\"type\":\"string\",\"doc\":\"Unit of the measure\"},{\"name\":\"value\",\"type\":\"double\",\"doc\":\"Measure value\"},{\"name\":\"store_id\",\"type\":[\"null\",\"long\"],\"doc\":\"StoreId of the measure\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Measure> ENCODER =
      new BinaryMessageEncoder<Measure>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Measure> DECODER =
      new BinaryMessageDecoder<Measure>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Measure> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Measure> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Measure> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Measure>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Measure to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Measure from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Measure instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Measure fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Kind of measure [weight, length, width, height] */
  @Deprecated public java.lang.CharSequence kind;
  /** Unit of the measure */
  @Deprecated public java.lang.CharSequence unit;
  /** Measure value */
  @Deprecated public double value;
  /** StoreId of the measure */
  @Deprecated public java.lang.Long store_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Measure() {}

  /**
   * All-args constructor.
   * @param kind Kind of measure [weight, length, width, height]
   * @param unit Unit of the measure
   * @param value Measure value
   * @param store_id StoreId of the measure
   */
  public Measure(java.lang.CharSequence kind, java.lang.CharSequence unit, java.lang.Double value, java.lang.Long store_id) {
    this.kind = kind;
    this.unit = unit;
    this.value = value;
    this.store_id = store_id;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return kind;
    case 1: return unit;
    case 2: return value;
    case 3: return store_id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: kind = (java.lang.CharSequence)value$; break;
    case 1: unit = (java.lang.CharSequence)value$; break;
    case 2: value = (java.lang.Double)value$; break;
    case 3: store_id = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'kind' field.
   * @return Kind of measure [weight, length, width, height]
   */
  public java.lang.CharSequence getKind() {
    return kind;
  }


  /**
   * Sets the value of the 'kind' field.
   * Kind of measure [weight, length, width, height]
   * @param value the value to set.
   */
  public void setKind(java.lang.CharSequence value) {
    this.kind = value;
  }

  /**
   * Gets the value of the 'unit' field.
   * @return Unit of the measure
   */
  public java.lang.CharSequence getUnit() {
    return unit;
  }


  /**
   * Sets the value of the 'unit' field.
   * Unit of the measure
   * @param value the value to set.
   */
  public void setUnit(java.lang.CharSequence value) {
    this.unit = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return Measure value
   */
  public double getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * Measure value
   * @param value the value to set.
   */
  public void setValue(double value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'store_id' field.
   * @return StoreId of the measure
   */
  public java.lang.Long getStoreId() {
    return store_id;
  }


  /**
   * Sets the value of the 'store_id' field.
   * StoreId of the measure
   * @param value the value to set.
   */
  public void setStoreId(java.lang.Long value) {
    this.store_id = value;
  }

  /**
   * Creates a new Measure RecordBuilder.
   * @return A new Measure RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder newBuilder() {
    return new com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder();
  }

  /**
   * Creates a new Measure RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Measure RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder(other);
    }
  }

  /**
   * Creates a new Measure RecordBuilder by copying an existing Measure instance.
   * @param other The existing instance to copy.
   * @return A new Measure RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Measure other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder(other);
    }
  }

  /**
   * RecordBuilder for Measure instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Measure>
    implements org.apache.avro.data.RecordBuilder<Measure> {

    /** Kind of measure [weight, length, width, height] */
    private java.lang.CharSequence kind;
    /** Unit of the measure */
    private java.lang.CharSequence unit;
    /** Measure value */
    private double value;
    /** StoreId of the measure */
    private java.lang.Long store_id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.kind)) {
        this.kind = data().deepCopy(fields()[0].schema(), other.kind);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.unit)) {
        this.unit = data().deepCopy(fields()[1].schema(), other.unit);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.store_id)) {
        this.store_id = data().deepCopy(fields()[3].schema(), other.store_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Measure instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Measure other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.kind)) {
        this.kind = data().deepCopy(fields()[0].schema(), other.kind);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.unit)) {
        this.unit = data().deepCopy(fields()[1].schema(), other.unit);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.store_id)) {
        this.store_id = data().deepCopy(fields()[3].schema(), other.store_id);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'kind' field.
      * Kind of measure [weight, length, width, height]
      * @return The value.
      */
    public java.lang.CharSequence getKind() {
      return kind;
    }


    /**
      * Sets the value of the 'kind' field.
      * Kind of measure [weight, length, width, height]
      * @param value The value of 'kind'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder setKind(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.kind = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'kind' field has been set.
      * Kind of measure [weight, length, width, height]
      * @return True if the 'kind' field has been set, false otherwise.
      */
    public boolean hasKind() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'kind' field.
      * Kind of measure [weight, length, width, height]
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder clearKind() {
      kind = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'unit' field.
      * Unit of the measure
      * @return The value.
      */
    public java.lang.CharSequence getUnit() {
      return unit;
    }


    /**
      * Sets the value of the 'unit' field.
      * Unit of the measure
      * @param value The value of 'unit'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder setUnit(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.unit = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'unit' field has been set.
      * Unit of the measure
      * @return True if the 'unit' field has been set, false otherwise.
      */
    public boolean hasUnit() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'unit' field.
      * Unit of the measure
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder clearUnit() {
      unit = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * Measure value
      * @return The value.
      */
    public double getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * Measure value
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder setValue(double value) {
      validate(fields()[2], value);
      this.value = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * Measure value
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'value' field.
      * Measure value
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder clearValue() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'store_id' field.
      * StoreId of the measure
      * @return The value.
      */
    public java.lang.Long getStoreId() {
      return store_id;
    }


    /**
      * Sets the value of the 'store_id' field.
      * StoreId of the measure
      * @param value The value of 'store_id'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder setStoreId(java.lang.Long value) {
      validate(fields()[3], value);
      this.store_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'store_id' field has been set.
      * StoreId of the measure
      * @return True if the 'store_id' field has been set, false otherwise.
      */
    public boolean hasStoreId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'store_id' field.
      * StoreId of the measure
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Measure.Builder clearStoreId() {
      store_id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Measure build() {
      try {
        Measure record = new Measure();
        record.kind = fieldSetFlags()[0] ? this.kind : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.unit = fieldSetFlags()[1] ? this.unit : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.value = fieldSetFlags()[2] ? this.value : (java.lang.Double) defaultValue(fields()[2]);
        record.store_id = fieldSetFlags()[3] ? this.store_id : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Measure>
    WRITER$ = (org.apache.avro.io.DatumWriter<Measure>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Measure>
    READER$ = (org.apache.avro.io.DatumReader<Measure>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.kind);

    out.writeString(this.unit);

    out.writeDouble(this.value);

    if (this.store_id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.store_id);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.kind = in.readString(this.kind instanceof Utf8 ? (Utf8)this.kind : null);

      this.unit = in.readString(this.unit instanceof Utf8 ? (Utf8)this.unit : null);

      this.value = in.readDouble();

      if (in.readIndex() != 1) {
        in.readNull();
        this.store_id = null;
      } else {
        this.store_id = in.readLong();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.kind = in.readString(this.kind instanceof Utf8 ? (Utf8)this.kind : null);
          break;

        case 1:
          this.unit = in.readString(this.unit instanceof Utf8 ? (Utf8)this.unit : null);
          break;

        case 2:
          this.value = in.readDouble();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.store_id = null;
          } else {
            this.store_id = in.readLong();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










