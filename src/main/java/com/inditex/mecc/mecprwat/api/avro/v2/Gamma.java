/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.mecprwat.api.avro.v2;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Class that holds gamma information. */
@org.apache.avro.specific.AvroGenerated
public class Gamma extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1939406023496695162L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Gamma\",\"namespace\":\"com.inditex.mecc.mecprwat.api.avro.v2\",\"doc\":\"Class that holds gamma information.\",\"fields\":[{\"name\":\"gamma_id\",\"type\":\"long\",\"doc\":\"Gamma id of color.\"},{\"name\":\"position\",\"type\":\"long\",\"doc\":\"Correlation index of the gamma.\"},{\"name\":\"hex_code\",\"type\":\"string\",\"doc\":\"Hexadecimal code of the gamma.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Gamma> ENCODER =
      new BinaryMessageEncoder<Gamma>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Gamma> DECODER =
      new BinaryMessageDecoder<Gamma>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Gamma> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Gamma> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Gamma> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Gamma>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Gamma to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Gamma from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Gamma instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Gamma fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Gamma id of color. */
  @Deprecated public long gamma_id;
  /** Correlation index of the gamma. */
  @Deprecated public long position;
  /** Hexadecimal code of the gamma. */
  @Deprecated public java.lang.CharSequence hex_code;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Gamma() {}

  /**
   * All-args constructor.
   * @param gamma_id Gamma id of color.
   * @param position Correlation index of the gamma.
   * @param hex_code Hexadecimal code of the gamma.
   */
  public Gamma(java.lang.Long gamma_id, java.lang.Long position, java.lang.CharSequence hex_code) {
    this.gamma_id = gamma_id;
    this.position = position;
    this.hex_code = hex_code;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return gamma_id;
    case 1: return position;
    case 2: return hex_code;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: gamma_id = (java.lang.Long)value$; break;
    case 1: position = (java.lang.Long)value$; break;
    case 2: hex_code = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'gamma_id' field.
   * @return Gamma id of color.
   */
  public long getGammaId() {
    return gamma_id;
  }


  /**
   * Sets the value of the 'gamma_id' field.
   * Gamma id of color.
   * @param value the value to set.
   */
  public void setGammaId(long value) {
    this.gamma_id = value;
  }

  /**
   * Gets the value of the 'position' field.
   * @return Correlation index of the gamma.
   */
  public long getPosition() {
    return position;
  }


  /**
   * Sets the value of the 'position' field.
   * Correlation index of the gamma.
   * @param value the value to set.
   */
  public void setPosition(long value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'hex_code' field.
   * @return Hexadecimal code of the gamma.
   */
  public java.lang.CharSequence getHexCode() {
    return hex_code;
  }


  /**
   * Sets the value of the 'hex_code' field.
   * Hexadecimal code of the gamma.
   * @param value the value to set.
   */
  public void setHexCode(java.lang.CharSequence value) {
    this.hex_code = value;
  }

  /**
   * Creates a new Gamma RecordBuilder.
   * @return A new Gamma RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder newBuilder() {
    return new com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder();
  }

  /**
   * Creates a new Gamma RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Gamma RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder(other);
    }
  }

  /**
   * Creates a new Gamma RecordBuilder by copying an existing Gamma instance.
   * @param other The existing instance to copy.
   * @return A new Gamma RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Gamma other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder(other);
    }
  }

  /**
   * RecordBuilder for Gamma instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Gamma>
    implements org.apache.avro.data.RecordBuilder<Gamma> {

    /** Gamma id of color. */
    private long gamma_id;
    /** Correlation index of the gamma. */
    private long position;
    /** Hexadecimal code of the gamma. */
    private java.lang.CharSequence hex_code;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.gamma_id)) {
        this.gamma_id = data().deepCopy(fields()[0].schema(), other.gamma_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.hex_code)) {
        this.hex_code = data().deepCopy(fields()[2].schema(), other.hex_code);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Gamma instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Gamma other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.gamma_id)) {
        this.gamma_id = data().deepCopy(fields()[0].schema(), other.gamma_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hex_code)) {
        this.hex_code = data().deepCopy(fields()[2].schema(), other.hex_code);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'gamma_id' field.
      * Gamma id of color.
      * @return The value.
      */
    public long getGammaId() {
      return gamma_id;
    }


    /**
      * Sets the value of the 'gamma_id' field.
      * Gamma id of color.
      * @param value The value of 'gamma_id'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder setGammaId(long value) {
      validate(fields()[0], value);
      this.gamma_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'gamma_id' field has been set.
      * Gamma id of color.
      * @return True if the 'gamma_id' field has been set, false otherwise.
      */
    public boolean hasGammaId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'gamma_id' field.
      * Gamma id of color.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder clearGammaId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'position' field.
      * Correlation index of the gamma.
      * @return The value.
      */
    public long getPosition() {
      return position;
    }


    /**
      * Sets the value of the 'position' field.
      * Correlation index of the gamma.
      * @param value The value of 'position'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder setPosition(long value) {
      validate(fields()[1], value);
      this.position = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'position' field has been set.
      * Correlation index of the gamma.
      * @return True if the 'position' field has been set, false otherwise.
      */
    public boolean hasPosition() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'position' field.
      * Correlation index of the gamma.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder clearPosition() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'hex_code' field.
      * Hexadecimal code of the gamma.
      * @return The value.
      */
    public java.lang.CharSequence getHexCode() {
      return hex_code;
    }


    /**
      * Sets the value of the 'hex_code' field.
      * Hexadecimal code of the gamma.
      * @param value The value of 'hex_code'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder setHexCode(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.hex_code = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'hex_code' field has been set.
      * Hexadecimal code of the gamma.
      * @return True if the 'hex_code' field has been set, false otherwise.
      */
    public boolean hasHexCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'hex_code' field.
      * Hexadecimal code of the gamma.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Gamma.Builder clearHexCode() {
      hex_code = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Gamma build() {
      try {
        Gamma record = new Gamma();
        record.gamma_id = fieldSetFlags()[0] ? this.gamma_id : (java.lang.Long) defaultValue(fields()[0]);
        record.position = fieldSetFlags()[1] ? this.position : (java.lang.Long) defaultValue(fields()[1]);
        record.hex_code = fieldSetFlags()[2] ? this.hex_code : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Gamma>
    WRITER$ = (org.apache.avro.io.DatumWriter<Gamma>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Gamma>
    READER$ = (org.apache.avro.io.DatumReader<Gamma>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.gamma_id);

    out.writeLong(this.position);

    out.writeString(this.hex_code);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.gamma_id = in.readLong();

      this.position = in.readLong();

      this.hex_code = in.readString(this.hex_code instanceof Utf8 ? (Utf8)this.hex_code : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.gamma_id = in.readLong();
          break;

        case 1:
          this.position = in.readLong();
          break;

        case 2:
          this.hex_code = in.readString(this.hex_code instanceof Utf8 ? (Utf8)this.hex_code : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










