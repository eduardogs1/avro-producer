/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.mecprwat.api.avro.v2;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Class that holds a tag (identifier and type) translated in all available languages. */
@org.apache.avro.specific.AvroGenerated
public class Tag extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3772992605699024788L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Tag\",\"namespace\":\"com.inditex.mecc.mecprwat.api.avro.v2\",\"doc\":\"Class that holds a tag (identifier and type) translated in all available languages.\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"I18NText\",\"doc\":\"Class that holds a text and its locale ISO code.\",\"fields\":[{\"name\":\"iso_code\",\"type\":\"string\",\"doc\":\"Locale ISO code.\"},{\"name\":\"text\",\"type\":\"string\",\"doc\":\"Internationalized text.\"}]}},\"doc\":\"Internationalized tags.\",\"default\":[]},{\"name\":\"identifier\",\"type\":\"string\",\"doc\":\"Indicates the identifier of the tag C-SRA-PARKA, C-NNO-BASICO, C-SRA-ABRIGOS-TRENCH...\"},{\"name\":\"type\",\"type\":\"string\",\"doc\":\"Indicates the type of tag (XGENFILTER, XCATFILTER).\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Tag> ENCODER =
      new BinaryMessageEncoder<Tag>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Tag> DECODER =
      new BinaryMessageDecoder<Tag>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Tag> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Tag> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Tag> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Tag>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Tag to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Tag from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Tag instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Tag fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Internationalized tags. */
  @Deprecated public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> name;
  /** Indicates the identifier of the tag C-SRA-PARKA, C-NNO-BASICO, C-SRA-ABRIGOS-TRENCH... */
  @Deprecated public java.lang.CharSequence identifier;
  /** Indicates the type of tag (XGENFILTER, XCATFILTER). */
  @Deprecated public java.lang.CharSequence type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Tag() {}

  /**
   * All-args constructor.
   * @param name Internationalized tags.
   * @param identifier Indicates the identifier of the tag C-SRA-PARKA, C-NNO-BASICO, C-SRA-ABRIGOS-TRENCH...
   * @param type Indicates the type of tag (XGENFILTER, XCATFILTER).
   */
  public Tag(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> name, java.lang.CharSequence identifier, java.lang.CharSequence type) {
    this.name = name;
    this.identifier = identifier;
    this.type = type;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return identifier;
    case 2: return type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>)value$; break;
    case 1: identifier = (java.lang.CharSequence)value$; break;
    case 2: type = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return Internationalized tags.
   */
  public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * Internationalized tags.
   * @param value the value to set.
   */
  public void setName(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'identifier' field.
   * @return Indicates the identifier of the tag C-SRA-PARKA, C-NNO-BASICO, C-SRA-ABRIGOS-TRENCH...
   */
  public java.lang.CharSequence getIdentifier() {
    return identifier;
  }


  /**
   * Sets the value of the 'identifier' field.
   * Indicates the identifier of the tag C-SRA-PARKA, C-NNO-BASICO, C-SRA-ABRIGOS-TRENCH...
   * @param value the value to set.
   */
  public void setIdentifier(java.lang.CharSequence value) {
    this.identifier = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Indicates the type of tag (XGENFILTER, XCATFILTER).
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Indicates the type of tag (XGENFILTER, XCATFILTER).
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Creates a new Tag RecordBuilder.
   * @return A new Tag RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder newBuilder() {
    return new com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder();
  }

  /**
   * Creates a new Tag RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Tag RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder(other);
    }
  }

  /**
   * Creates a new Tag RecordBuilder by copying an existing Tag instance.
   * @param other The existing instance to copy.
   * @return A new Tag RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Tag other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder(other);
    }
  }

  /**
   * RecordBuilder for Tag instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Tag>
    implements org.apache.avro.data.RecordBuilder<Tag> {

    /** Internationalized tags. */
    private java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> name;
    /** Indicates the identifier of the tag C-SRA-PARKA, C-NNO-BASICO, C-SRA-ABRIGOS-TRENCH... */
    private java.lang.CharSequence identifier;
    /** Indicates the type of tag (XGENFILTER, XCATFILTER). */
    private java.lang.CharSequence type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.identifier)) {
        this.identifier = data().deepCopy(fields()[1].schema(), other.identifier);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Tag instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Tag other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.identifier)) {
        this.identifier = data().deepCopy(fields()[1].schema(), other.identifier);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * Internationalized tags.
      * @return The value.
      */
    public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * Internationalized tags.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder setName(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Internationalized tags.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * Internationalized tags.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'identifier' field.
      * Indicates the identifier of the tag C-SRA-PARKA, C-NNO-BASICO, C-SRA-ABRIGOS-TRENCH...
      * @return The value.
      */
    public java.lang.CharSequence getIdentifier() {
      return identifier;
    }


    /**
      * Sets the value of the 'identifier' field.
      * Indicates the identifier of the tag C-SRA-PARKA, C-NNO-BASICO, C-SRA-ABRIGOS-TRENCH...
      * @param value The value of 'identifier'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder setIdentifier(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.identifier = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'identifier' field has been set.
      * Indicates the identifier of the tag C-SRA-PARKA, C-NNO-BASICO, C-SRA-ABRIGOS-TRENCH...
      * @return True if the 'identifier' field has been set, false otherwise.
      */
    public boolean hasIdentifier() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'identifier' field.
      * Indicates the identifier of the tag C-SRA-PARKA, C-NNO-BASICO, C-SRA-ABRIGOS-TRENCH...
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder clearIdentifier() {
      identifier = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Indicates the type of tag (XGENFILTER, XCATFILTER).
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Indicates the type of tag (XGENFILTER, XCATFILTER).
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder setType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Indicates the type of tag (XGENFILTER, XCATFILTER).
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * Indicates the type of tag (XGENFILTER, XCATFILTER).
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Tag.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Tag build() {
      try {
        Tag record = new Tag();
        record.name = fieldSetFlags()[0] ? this.name : (java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>) defaultValue(fields()[0]);
        record.identifier = fieldSetFlags()[1] ? this.identifier : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Tag>
    WRITER$ = (org.apache.avro.io.DatumWriter<Tag>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Tag>
    READER$ = (org.apache.avro.io.DatumReader<Tag>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.name.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.inditex.mecc.mecprwat.api.avro.v2.I18NText e0: this.name) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.identifier);

    out.writeString(this.type);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> a0 = this.name;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>((int)size0, SCHEMA$.getField("name").schema());
        this.name = a0;
      } else a0.clear();
      SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.inditex.mecc.mecprwat.api.avro.v2.I18NText e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.inditex.mecc.mecprwat.api.avro.v2.I18NText();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      this.identifier = in.readString(this.identifier instanceof Utf8 ? (Utf8)this.identifier : null);

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> a0 = this.name;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>((int)size0, SCHEMA$.getField("name").schema());
            this.name = a0;
          } else a0.clear();
          SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.I18NText>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.inditex.mecc.mecprwat.api.avro.v2.I18NText e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.inditex.mecc.mecprwat.api.avro.v2.I18NText();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 1:
          this.identifier = in.readString(this.identifier instanceof Utf8 ? (Utf8)this.identifier : null);
          break;

        case 2:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










