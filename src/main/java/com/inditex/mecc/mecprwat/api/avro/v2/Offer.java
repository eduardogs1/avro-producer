/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.mecprwat.api.avro.v2;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Class that holds the list of prices of the item bean. */
@org.apache.avro.specific.AvroGenerated
public class Offer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7103685102259846408L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Offer\",\"namespace\":\"com.inditex.mecc.mecprwat.api.avro.v2\",\"doc\":\"Class that holds the list of prices of the item bean.\",\"fields\":[{\"name\":\"prices\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Price\",\"doc\":\"Class that holds price information for a given period of time.\",\"fields\":[{\"name\":\"start_date\",\"type\":\"long\",\"doc\":\"Starting period date in milliseconds since epoch time where the price becomes valid.\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"end_date\",\"type\":\"long\",\"doc\":\"Ending period date in milliseconds since epoch time where the price stops being valid.\",\"order\":\"ignore\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"price\",\"type\":\"long\",\"doc\":\"Current price during the current period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents).\",\"order\":\"ignore\"},{\"name\":\"old_price\",\"type\":[\"null\",\"long\"],\"doc\":\"Previous price of the product during a sales period expressed in the smallest legal unit available for the price currency (e.g. prices are expressed in euro's cents). This is optional and used to compare previous and current prices during sales.\",\"order\":\"ignore\"},{\"name\":\"currency_iso\",\"type\":\"string\",\"doc\":\"Currency ISO 4217 code.\",\"order\":\"ignore\"},{\"name\":\"promotion\",\"type\":[\"null\",\"string\"],\"doc\":\"Price promotion information. This value will not be set on a regular price but will be set instead on sales and event prices.\",\"default\":null,\"order\":\"ignore\"}]}},\"doc\":\"List of prices of the current item.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Offer> ENCODER =
      new BinaryMessageEncoder<Offer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Offer> DECODER =
      new BinaryMessageDecoder<Offer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Offer> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Offer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Offer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Offer>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Offer to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Offer from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Offer instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Offer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** List of prices of the current item. */
  @Deprecated public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Price> prices;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Offer() {}

  /**
   * All-args constructor.
   * @param prices List of prices of the current item.
   */
  public Offer(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Price> prices) {
    this.prices = prices;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return prices;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: prices = (java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Price>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'prices' field.
   * @return List of prices of the current item.
   */
  public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Price> getPrices() {
    return prices;
  }


  /**
   * Sets the value of the 'prices' field.
   * List of prices of the current item.
   * @param value the value to set.
   */
  public void setPrices(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Price> value) {
    this.prices = value;
  }

  /**
   * Creates a new Offer RecordBuilder.
   * @return A new Offer RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Offer.Builder newBuilder() {
    return new com.inditex.mecc.mecprwat.api.avro.v2.Offer.Builder();
  }

  /**
   * Creates a new Offer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Offer RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Offer.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Offer.Builder other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Offer.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Offer.Builder(other);
    }
  }

  /**
   * Creates a new Offer RecordBuilder by copying an existing Offer instance.
   * @param other The existing instance to copy.
   * @return A new Offer RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Offer.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Offer other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Offer.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Offer.Builder(other);
    }
  }

  /**
   * RecordBuilder for Offer instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Offer>
    implements org.apache.avro.data.RecordBuilder<Offer> {

    /** List of prices of the current item. */
    private java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Price> prices;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Offer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.prices)) {
        this.prices = data().deepCopy(fields()[0].schema(), other.prices);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing Offer instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Offer other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.prices)) {
        this.prices = data().deepCopy(fields()[0].schema(), other.prices);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'prices' field.
      * List of prices of the current item.
      * @return The value.
      */
    public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Price> getPrices() {
      return prices;
    }


    /**
      * Sets the value of the 'prices' field.
      * List of prices of the current item.
      * @param value The value of 'prices'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Offer.Builder setPrices(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Price> value) {
      validate(fields()[0], value);
      this.prices = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'prices' field has been set.
      * List of prices of the current item.
      * @return True if the 'prices' field has been set, false otherwise.
      */
    public boolean hasPrices() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'prices' field.
      * List of prices of the current item.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Offer.Builder clearPrices() {
      prices = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Offer build() {
      try {
        Offer record = new Offer();
        record.prices = fieldSetFlags()[0] ? this.prices : (java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Price>) defaultValue(fields()[0]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Offer>
    WRITER$ = (org.apache.avro.io.DatumWriter<Offer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Offer>
    READER$ = (org.apache.avro.io.DatumReader<Offer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.prices.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.inditex.mecc.mecprwat.api.avro.v2.Price e0: this.prices) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Price> a0 = this.prices;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.Price>((int)size0, SCHEMA$.getField("prices").schema());
        this.prices = a0;
      } else a0.clear();
      SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.Price> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.Price>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.inditex.mecc.mecprwat.api.avro.v2.Price e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.inditex.mecc.mecprwat.api.avro.v2.Price();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 1; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Price> a0 = this.prices;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.Price>((int)size0, SCHEMA$.getField("prices").schema());
            this.prices = a0;
          } else a0.clear();
          SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.Price> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.Price>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.inditex.mecc.mecprwat.api.avro.v2.Price e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.inditex.mecc.mecprwat.api.avro.v2.Price();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










