/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.inditex.mecc.mecprwat.api.avro.v2;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Class that holds an Xmedia information. */
@org.apache.avro.specific.AvroGenerated
public class Xmedia extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7216297910843535094L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Xmedia\",\"namespace\":\"com.inditex.mecc.mecprwat.api.avro.v2\",\"doc\":\"Class that holds an Xmedia information.\",\"fields\":[{\"name\":\"color_id\",\"type\":\"string\",\"doc\":\"Identifier of the color which the xmedia belongs to\"},{\"name\":\"color_position\",\"type\":\"int\",\"doc\":\"Position of the color in the list of colors for a given product.\"},{\"name\":\"set\",\"type\":\"int\",\"doc\":\"Contains the set this xmedia is associated to. Typically front end will only display xmedia containing set = 2\"},{\"name\":\"type\",\"type\":\"string\",\"doc\":\"Indicates the type of xmedia (e.g. image, audio, video, vector or hls among others)\"},{\"name\":\"kind\",\"type\":\"string\",\"doc\":\"Secondary classification of xmedia (e.g. double, animation, double-animation) to be used for grids, or containing information about the image associated in a product detail view (e.g. full, side, back, detail, plain, look or colorcut)\"},{\"name\":\"index\",\"type\":\"int\",\"doc\":\"This index is used to discriminate different media for the same kind.\"},{\"name\":\"path\",\"type\":\"string\",\"doc\":\"Path where the xmedia is found within the base URL for a given xmedia types. Base URL's are defined within available xmedia formats for a given store\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"File name of the xmedia that can be used to build the URL. File extension is obtained from the xmedia format corresponding to the xmedia.\"},{\"name\":\"width\",\"type\":\"int\",\"doc\":\"Width of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.\"},{\"name\":\"height\",\"type\":\"int\",\"doc\":\"Height of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.\"},{\"name\":\"timestamp\",\"type\":\"string\",\"doc\":\"Timestamp of the xmedia expressed in milliseconds since epoch time. This is used to keep further control of browser caches.\"},{\"name\":\"allowed_screens\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"Indicates whether this xmedia is suitable for small screens (e.g. phones), large screens (e.g. computers and tablets) or both.\"},{\"name\":\"locations\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Location\",\"doc\":\"Class that holds location information for the media.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Location's name.\"},{\"name\":\"order\",\"type\":\"int\",\"doc\":\"Order in which media should be displayed.\"}]}},\"doc\":\"List of locations where the media was designed for.\"},{\"name\":\"extra_info\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"doc\":\"Additional information used by other Inditex brands.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Xmedia> ENCODER =
      new BinaryMessageEncoder<Xmedia>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Xmedia> DECODER =
      new BinaryMessageDecoder<Xmedia>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Xmedia> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Xmedia> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Xmedia> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Xmedia>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Xmedia to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Xmedia from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Xmedia instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Xmedia fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Identifier of the color which the xmedia belongs to */
  @Deprecated public java.lang.CharSequence color_id;
  /** Position of the color in the list of colors for a given product. */
  @Deprecated public int color_position;
  /** Contains the set this xmedia is associated to. Typically front end will only display xmedia containing set = 2 */
  @Deprecated public int set;
  /** Indicates the type of xmedia (e.g. image, audio, video, vector or hls among others) */
  @Deprecated public java.lang.CharSequence type;
  /** Secondary classification of xmedia (e.g. double, animation, double-animation) to be used for grids, or containing information about the image associated in a product detail view (e.g. full, side, back, detail, plain, look or colorcut) */
  @Deprecated public java.lang.CharSequence kind;
  /** This index is used to discriminate different media for the same kind. */
  @Deprecated public int index;
  /** Path where the xmedia is found within the base URL for a given xmedia types. Base URL's are defined within available xmedia formats for a given store */
  @Deprecated public java.lang.CharSequence path;
  /** File name of the xmedia that can be used to build the URL. File extension is obtained from the xmedia format corresponding to the xmedia. */
  @Deprecated public java.lang.CharSequence name;
  /** Width of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios. */
  @Deprecated public int width;
  /** Height of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios. */
  @Deprecated public int height;
  /** Timestamp of the xmedia expressed in milliseconds since epoch time. This is used to keep further control of browser caches. */
  @Deprecated public java.lang.CharSequence timestamp;
  /** Indicates whether this xmedia is suitable for small screens (e.g. phones), large screens (e.g. computers and tablets) or both. */
  @Deprecated public java.util.List<java.lang.CharSequence> allowed_screens;
  /** List of locations where the media was designed for. */
  @Deprecated public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Location> locations;
  /** Additional information used by other Inditex brands. */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> extra_info;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Xmedia() {}

  /**
   * All-args constructor.
   * @param color_id Identifier of the color which the xmedia belongs to
   * @param color_position Position of the color in the list of colors for a given product.
   * @param set Contains the set this xmedia is associated to. Typically front end will only display xmedia containing set = 2
   * @param type Indicates the type of xmedia (e.g. image, audio, video, vector or hls among others)
   * @param kind Secondary classification of xmedia (e.g. double, animation, double-animation) to be used for grids, or containing information about the image associated in a product detail view (e.g. full, side, back, detail, plain, look or colorcut)
   * @param index This index is used to discriminate different media for the same kind.
   * @param path Path where the xmedia is found within the base URL for a given xmedia types. Base URL's are defined within available xmedia formats for a given store
   * @param name File name of the xmedia that can be used to build the URL. File extension is obtained from the xmedia format corresponding to the xmedia.
   * @param width Width of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.
   * @param height Height of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.
   * @param timestamp Timestamp of the xmedia expressed in milliseconds since epoch time. This is used to keep further control of browser caches.
   * @param allowed_screens Indicates whether this xmedia is suitable for small screens (e.g. phones), large screens (e.g. computers and tablets) or both.
   * @param locations List of locations where the media was designed for.
   * @param extra_info Additional information used by other Inditex brands.
   */
  public Xmedia(java.lang.CharSequence color_id, java.lang.Integer color_position, java.lang.Integer set, java.lang.CharSequence type, java.lang.CharSequence kind, java.lang.Integer index, java.lang.CharSequence path, java.lang.CharSequence name, java.lang.Integer width, java.lang.Integer height, java.lang.CharSequence timestamp, java.util.List<java.lang.CharSequence> allowed_screens, java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Location> locations, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> extra_info) {
    this.color_id = color_id;
    this.color_position = color_position;
    this.set = set;
    this.type = type;
    this.kind = kind;
    this.index = index;
    this.path = path;
    this.name = name;
    this.width = width;
    this.height = height;
    this.timestamp = timestamp;
    this.allowed_screens = allowed_screens;
    this.locations = locations;
    this.extra_info = extra_info;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return color_id;
    case 1: return color_position;
    case 2: return set;
    case 3: return type;
    case 4: return kind;
    case 5: return index;
    case 6: return path;
    case 7: return name;
    case 8: return width;
    case 9: return height;
    case 10: return timestamp;
    case 11: return allowed_screens;
    case 12: return locations;
    case 13: return extra_info;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: color_id = (java.lang.CharSequence)value$; break;
    case 1: color_position = (java.lang.Integer)value$; break;
    case 2: set = (java.lang.Integer)value$; break;
    case 3: type = (java.lang.CharSequence)value$; break;
    case 4: kind = (java.lang.CharSequence)value$; break;
    case 5: index = (java.lang.Integer)value$; break;
    case 6: path = (java.lang.CharSequence)value$; break;
    case 7: name = (java.lang.CharSequence)value$; break;
    case 8: width = (java.lang.Integer)value$; break;
    case 9: height = (java.lang.Integer)value$; break;
    case 10: timestamp = (java.lang.CharSequence)value$; break;
    case 11: allowed_screens = (java.util.List<java.lang.CharSequence>)value$; break;
    case 12: locations = (java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Location>)value$; break;
    case 13: extra_info = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'color_id' field.
   * @return Identifier of the color which the xmedia belongs to
   */
  public java.lang.CharSequence getColorId() {
    return color_id;
  }


  /**
   * Sets the value of the 'color_id' field.
   * Identifier of the color which the xmedia belongs to
   * @param value the value to set.
   */
  public void setColorId(java.lang.CharSequence value) {
    this.color_id = value;
  }

  /**
   * Gets the value of the 'color_position' field.
   * @return Position of the color in the list of colors for a given product.
   */
  public int getColorPosition() {
    return color_position;
  }


  /**
   * Sets the value of the 'color_position' field.
   * Position of the color in the list of colors for a given product.
   * @param value the value to set.
   */
  public void setColorPosition(int value) {
    this.color_position = value;
  }

  /**
   * Gets the value of the 'set' field.
   * @return Contains the set this xmedia is associated to. Typically front end will only display xmedia containing set = 2
   */
  public int getSet() {
    return set;
  }


  /**
   * Sets the value of the 'set' field.
   * Contains the set this xmedia is associated to. Typically front end will only display xmedia containing set = 2
   * @param value the value to set.
   */
  public void setSet(int value) {
    this.set = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Indicates the type of xmedia (e.g. image, audio, video, vector or hls among others)
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Indicates the type of xmedia (e.g. image, audio, video, vector or hls among others)
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'kind' field.
   * @return Secondary classification of xmedia (e.g. double, animation, double-animation) to be used for grids, or containing information about the image associated in a product detail view (e.g. full, side, back, detail, plain, look or colorcut)
   */
  public java.lang.CharSequence getKind() {
    return kind;
  }


  /**
   * Sets the value of the 'kind' field.
   * Secondary classification of xmedia (e.g. double, animation, double-animation) to be used for grids, or containing information about the image associated in a product detail view (e.g. full, side, back, detail, plain, look or colorcut)
   * @param value the value to set.
   */
  public void setKind(java.lang.CharSequence value) {
    this.kind = value;
  }

  /**
   * Gets the value of the 'index' field.
   * @return This index is used to discriminate different media for the same kind.
   */
  public int getIndex() {
    return index;
  }


  /**
   * Sets the value of the 'index' field.
   * This index is used to discriminate different media for the same kind.
   * @param value the value to set.
   */
  public void setIndex(int value) {
    this.index = value;
  }

  /**
   * Gets the value of the 'path' field.
   * @return Path where the xmedia is found within the base URL for a given xmedia types. Base URL's are defined within available xmedia formats for a given store
   */
  public java.lang.CharSequence getPath() {
    return path;
  }


  /**
   * Sets the value of the 'path' field.
   * Path where the xmedia is found within the base URL for a given xmedia types. Base URL's are defined within available xmedia formats for a given store
   * @param value the value to set.
   */
  public void setPath(java.lang.CharSequence value) {
    this.path = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return File name of the xmedia that can be used to build the URL. File extension is obtained from the xmedia format corresponding to the xmedia.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * File name of the xmedia that can be used to build the URL. File extension is obtained from the xmedia format corresponding to the xmedia.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'width' field.
   * @return Width of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.
   */
  public int getWidth() {
    return width;
  }


  /**
   * Sets the value of the 'width' field.
   * Width of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.
   * @param value the value to set.
   */
  public void setWidth(int value) {
    this.width = value;
  }

  /**
   * Gets the value of the 'height' field.
   * @return Height of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.
   */
  public int getHeight() {
    return height;
  }


  /**
   * Sets the value of the 'height' field.
   * Height of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.
   * @param value the value to set.
   */
  public void setHeight(int value) {
    this.height = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp of the xmedia expressed in milliseconds since epoch time. This is used to keep further control of browser caches.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp of the xmedia expressed in milliseconds since epoch time. This is used to keep further control of browser caches.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'allowed_screens' field.
   * @return Indicates whether this xmedia is suitable for small screens (e.g. phones), large screens (e.g. computers and tablets) or both.
   */
  public java.util.List<java.lang.CharSequence> getAllowedScreens() {
    return allowed_screens;
  }


  /**
   * Sets the value of the 'allowed_screens' field.
   * Indicates whether this xmedia is suitable for small screens (e.g. phones), large screens (e.g. computers and tablets) or both.
   * @param value the value to set.
   */
  public void setAllowedScreens(java.util.List<java.lang.CharSequence> value) {
    this.allowed_screens = value;
  }

  /**
   * Gets the value of the 'locations' field.
   * @return List of locations where the media was designed for.
   */
  public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Location> getLocations() {
    return locations;
  }


  /**
   * Sets the value of the 'locations' field.
   * List of locations where the media was designed for.
   * @param value the value to set.
   */
  public void setLocations(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Location> value) {
    this.locations = value;
  }

  /**
   * Gets the value of the 'extra_info' field.
   * @return Additional information used by other Inditex brands.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getExtraInfo() {
    return extra_info;
  }


  /**
   * Sets the value of the 'extra_info' field.
   * Additional information used by other Inditex brands.
   * @param value the value to set.
   */
  public void setExtraInfo(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.extra_info = value;
  }

  /**
   * Creates a new Xmedia RecordBuilder.
   * @return A new Xmedia RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder newBuilder() {
    return new com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder();
  }

  /**
   * Creates a new Xmedia RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Xmedia RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder(other);
    }
  }

  /**
   * Creates a new Xmedia RecordBuilder by copying an existing Xmedia instance.
   * @param other The existing instance to copy.
   * @return A new Xmedia RecordBuilder
   */
  public static com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder newBuilder(com.inditex.mecc.mecprwat.api.avro.v2.Xmedia other) {
    if (other == null) {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder();
    } else {
      return new com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder(other);
    }
  }

  /**
   * RecordBuilder for Xmedia instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Xmedia>
    implements org.apache.avro.data.RecordBuilder<Xmedia> {

    /** Identifier of the color which the xmedia belongs to */
    private java.lang.CharSequence color_id;
    /** Position of the color in the list of colors for a given product. */
    private int color_position;
    /** Contains the set this xmedia is associated to. Typically front end will only display xmedia containing set = 2 */
    private int set;
    /** Indicates the type of xmedia (e.g. image, audio, video, vector or hls among others) */
    private java.lang.CharSequence type;
    /** Secondary classification of xmedia (e.g. double, animation, double-animation) to be used for grids, or containing information about the image associated in a product detail view (e.g. full, side, back, detail, plain, look or colorcut) */
    private java.lang.CharSequence kind;
    /** This index is used to discriminate different media for the same kind. */
    private int index;
    /** Path where the xmedia is found within the base URL for a given xmedia types. Base URL's are defined within available xmedia formats for a given store */
    private java.lang.CharSequence path;
    /** File name of the xmedia that can be used to build the URL. File extension is obtained from the xmedia format corresponding to the xmedia. */
    private java.lang.CharSequence name;
    /** Width of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios. */
    private int width;
    /** Height of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios. */
    private int height;
    /** Timestamp of the xmedia expressed in milliseconds since epoch time. This is used to keep further control of browser caches. */
    private java.lang.CharSequence timestamp;
    /** Indicates whether this xmedia is suitable for small screens (e.g. phones), large screens (e.g. computers and tablets) or both. */
    private java.util.List<java.lang.CharSequence> allowed_screens;
    /** List of locations where the media was designed for. */
    private java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Location> locations;
    /** Additional information used by other Inditex brands. */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> extra_info;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.color_id)) {
        this.color_id = data().deepCopy(fields()[0].schema(), other.color_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.color_position)) {
        this.color_position = data().deepCopy(fields()[1].schema(), other.color_position);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.set)) {
        this.set = data().deepCopy(fields()[2].schema(), other.set);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.kind)) {
        this.kind = data().deepCopy(fields()[4].schema(), other.kind);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.index)) {
        this.index = data().deepCopy(fields()[5].schema(), other.index);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.path)) {
        this.path = data().deepCopy(fields()[6].schema(), other.path);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.name)) {
        this.name = data().deepCopy(fields()[7].schema(), other.name);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.width)) {
        this.width = data().deepCopy(fields()[8].schema(), other.width);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.height)) {
        this.height = data().deepCopy(fields()[9].schema(), other.height);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[10].schema(), other.timestamp);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.allowed_screens)) {
        this.allowed_screens = data().deepCopy(fields()[11].schema(), other.allowed_screens);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.locations)) {
        this.locations = data().deepCopy(fields()[12].schema(), other.locations);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.extra_info)) {
        this.extra_info = data().deepCopy(fields()[13].schema(), other.extra_info);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing Xmedia instance
     * @param other The existing instance to copy.
     */
    private Builder(com.inditex.mecc.mecprwat.api.avro.v2.Xmedia other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.color_id)) {
        this.color_id = data().deepCopy(fields()[0].schema(), other.color_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.color_position)) {
        this.color_position = data().deepCopy(fields()[1].schema(), other.color_position);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.set)) {
        this.set = data().deepCopy(fields()[2].schema(), other.set);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.kind)) {
        this.kind = data().deepCopy(fields()[4].schema(), other.kind);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.index)) {
        this.index = data().deepCopy(fields()[5].schema(), other.index);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.path)) {
        this.path = data().deepCopy(fields()[6].schema(), other.path);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.name)) {
        this.name = data().deepCopy(fields()[7].schema(), other.name);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.width)) {
        this.width = data().deepCopy(fields()[8].schema(), other.width);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.height)) {
        this.height = data().deepCopy(fields()[9].schema(), other.height);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[10].schema(), other.timestamp);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.allowed_screens)) {
        this.allowed_screens = data().deepCopy(fields()[11].schema(), other.allowed_screens);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.locations)) {
        this.locations = data().deepCopy(fields()[12].schema(), other.locations);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.extra_info)) {
        this.extra_info = data().deepCopy(fields()[13].schema(), other.extra_info);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'color_id' field.
      * Identifier of the color which the xmedia belongs to
      * @return The value.
      */
    public java.lang.CharSequence getColorId() {
      return color_id;
    }


    /**
      * Sets the value of the 'color_id' field.
      * Identifier of the color which the xmedia belongs to
      * @param value The value of 'color_id'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder setColorId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.color_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'color_id' field has been set.
      * Identifier of the color which the xmedia belongs to
      * @return True if the 'color_id' field has been set, false otherwise.
      */
    public boolean hasColorId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'color_id' field.
      * Identifier of the color which the xmedia belongs to
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder clearColorId() {
      color_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'color_position' field.
      * Position of the color in the list of colors for a given product.
      * @return The value.
      */
    public int getColorPosition() {
      return color_position;
    }


    /**
      * Sets the value of the 'color_position' field.
      * Position of the color in the list of colors for a given product.
      * @param value The value of 'color_position'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder setColorPosition(int value) {
      validate(fields()[1], value);
      this.color_position = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'color_position' field has been set.
      * Position of the color in the list of colors for a given product.
      * @return True if the 'color_position' field has been set, false otherwise.
      */
    public boolean hasColorPosition() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'color_position' field.
      * Position of the color in the list of colors for a given product.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder clearColorPosition() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'set' field.
      * Contains the set this xmedia is associated to. Typically front end will only display xmedia containing set = 2
      * @return The value.
      */
    public int getSet() {
      return set;
    }


    /**
      * Sets the value of the 'set' field.
      * Contains the set this xmedia is associated to. Typically front end will only display xmedia containing set = 2
      * @param value The value of 'set'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder setSet(int value) {
      validate(fields()[2], value);
      this.set = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'set' field has been set.
      * Contains the set this xmedia is associated to. Typically front end will only display xmedia containing set = 2
      * @return True if the 'set' field has been set, false otherwise.
      */
    public boolean hasSet() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'set' field.
      * Contains the set this xmedia is associated to. Typically front end will only display xmedia containing set = 2
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder clearSet() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Indicates the type of xmedia (e.g. image, audio, video, vector or hls among others)
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Indicates the type of xmedia (e.g. image, audio, video, vector or hls among others)
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder setType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Indicates the type of xmedia (e.g. image, audio, video, vector or hls among others)
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * Indicates the type of xmedia (e.g. image, audio, video, vector or hls among others)
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'kind' field.
      * Secondary classification of xmedia (e.g. double, animation, double-animation) to be used for grids, or containing information about the image associated in a product detail view (e.g. full, side, back, detail, plain, look or colorcut)
      * @return The value.
      */
    public java.lang.CharSequence getKind() {
      return kind;
    }


    /**
      * Sets the value of the 'kind' field.
      * Secondary classification of xmedia (e.g. double, animation, double-animation) to be used for grids, or containing information about the image associated in a product detail view (e.g. full, side, back, detail, plain, look or colorcut)
      * @param value The value of 'kind'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder setKind(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.kind = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'kind' field has been set.
      * Secondary classification of xmedia (e.g. double, animation, double-animation) to be used for grids, or containing information about the image associated in a product detail view (e.g. full, side, back, detail, plain, look or colorcut)
      * @return True if the 'kind' field has been set, false otherwise.
      */
    public boolean hasKind() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'kind' field.
      * Secondary classification of xmedia (e.g. double, animation, double-animation) to be used for grids, or containing information about the image associated in a product detail view (e.g. full, side, back, detail, plain, look or colorcut)
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder clearKind() {
      kind = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'index' field.
      * This index is used to discriminate different media for the same kind.
      * @return The value.
      */
    public int getIndex() {
      return index;
    }


    /**
      * Sets the value of the 'index' field.
      * This index is used to discriminate different media for the same kind.
      * @param value The value of 'index'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder setIndex(int value) {
      validate(fields()[5], value);
      this.index = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'index' field has been set.
      * This index is used to discriminate different media for the same kind.
      * @return True if the 'index' field has been set, false otherwise.
      */
    public boolean hasIndex() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'index' field.
      * This index is used to discriminate different media for the same kind.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder clearIndex() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'path' field.
      * Path where the xmedia is found within the base URL for a given xmedia types. Base URL's are defined within available xmedia formats for a given store
      * @return The value.
      */
    public java.lang.CharSequence getPath() {
      return path;
    }


    /**
      * Sets the value of the 'path' field.
      * Path where the xmedia is found within the base URL for a given xmedia types. Base URL's are defined within available xmedia formats for a given store
      * @param value The value of 'path'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder setPath(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.path = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'path' field has been set.
      * Path where the xmedia is found within the base URL for a given xmedia types. Base URL's are defined within available xmedia formats for a given store
      * @return True if the 'path' field has been set, false otherwise.
      */
    public boolean hasPath() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'path' field.
      * Path where the xmedia is found within the base URL for a given xmedia types. Base URL's are defined within available xmedia formats for a given store
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder clearPath() {
      path = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * File name of the xmedia that can be used to build the URL. File extension is obtained from the xmedia format corresponding to the xmedia.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * File name of the xmedia that can be used to build the URL. File extension is obtained from the xmedia format corresponding to the xmedia.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder setName(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.name = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * File name of the xmedia that can be used to build the URL. File extension is obtained from the xmedia format corresponding to the xmedia.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'name' field.
      * File name of the xmedia that can be used to build the URL. File extension is obtained from the xmedia format corresponding to the xmedia.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder clearName() {
      name = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'width' field.
      * Width of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.
      * @return The value.
      */
    public int getWidth() {
      return width;
    }


    /**
      * Sets the value of the 'width' field.
      * Width of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.
      * @param value The value of 'width'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder setWidth(int value) {
      validate(fields()[8], value);
      this.width = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'width' field has been set.
      * Width of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.
      * @return True if the 'width' field has been set, false otherwise.
      */
    public boolean hasWidth() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'width' field.
      * Width of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder clearWidth() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'height' field.
      * Height of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.
      * @return The value.
      */
    public int getHeight() {
      return height;
    }


    /**
      * Sets the value of the 'height' field.
      * Height of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.
      * @param value The value of 'height'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder setHeight(int value) {
      validate(fields()[9], value);
      this.height = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'height' field has been set.
      * Height of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.
      * @return True if the 'height' field has been set, false otherwise.
      */
    public boolean hasHeight() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'height' field.
      * Height of the highest resolution version of the xmedia expressed in pixels. This can be used to compute aspect ratios.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder clearHeight() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp of the xmedia expressed in milliseconds since epoch time. This is used to keep further control of browser caches.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp of the xmedia expressed in milliseconds since epoch time. This is used to keep further control of browser caches.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.timestamp = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp of the xmedia expressed in milliseconds since epoch time. This is used to keep further control of browser caches.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp of the xmedia expressed in milliseconds since epoch time. This is used to keep further control of browser caches.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'allowed_screens' field.
      * Indicates whether this xmedia is suitable for small screens (e.g. phones), large screens (e.g. computers and tablets) or both.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAllowedScreens() {
      return allowed_screens;
    }


    /**
      * Sets the value of the 'allowed_screens' field.
      * Indicates whether this xmedia is suitable for small screens (e.g. phones), large screens (e.g. computers and tablets) or both.
      * @param value The value of 'allowed_screens'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder setAllowedScreens(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[11], value);
      this.allowed_screens = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'allowed_screens' field has been set.
      * Indicates whether this xmedia is suitable for small screens (e.g. phones), large screens (e.g. computers and tablets) or both.
      * @return True if the 'allowed_screens' field has been set, false otherwise.
      */
    public boolean hasAllowedScreens() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'allowed_screens' field.
      * Indicates whether this xmedia is suitable for small screens (e.g. phones), large screens (e.g. computers and tablets) or both.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder clearAllowedScreens() {
      allowed_screens = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'locations' field.
      * List of locations where the media was designed for.
      * @return The value.
      */
    public java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Location> getLocations() {
      return locations;
    }


    /**
      * Sets the value of the 'locations' field.
      * List of locations where the media was designed for.
      * @param value The value of 'locations'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder setLocations(java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Location> value) {
      validate(fields()[12], value);
      this.locations = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'locations' field has been set.
      * List of locations where the media was designed for.
      * @return True if the 'locations' field has been set, false otherwise.
      */
    public boolean hasLocations() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'locations' field.
      * List of locations where the media was designed for.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder clearLocations() {
      locations = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'extra_info' field.
      * Additional information used by other Inditex brands.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getExtraInfo() {
      return extra_info;
    }


    /**
      * Sets the value of the 'extra_info' field.
      * Additional information used by other Inditex brands.
      * @param value The value of 'extra_info'.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder setExtraInfo(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[13], value);
      this.extra_info = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'extra_info' field has been set.
      * Additional information used by other Inditex brands.
      * @return True if the 'extra_info' field has been set, false otherwise.
      */
    public boolean hasExtraInfo() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'extra_info' field.
      * Additional information used by other Inditex brands.
      * @return This builder.
      */
    public com.inditex.mecc.mecprwat.api.avro.v2.Xmedia.Builder clearExtraInfo() {
      extra_info = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Xmedia build() {
      try {
        Xmedia record = new Xmedia();
        record.color_id = fieldSetFlags()[0] ? this.color_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.color_position = fieldSetFlags()[1] ? this.color_position : (java.lang.Integer) defaultValue(fields()[1]);
        record.set = fieldSetFlags()[2] ? this.set : (java.lang.Integer) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.kind = fieldSetFlags()[4] ? this.kind : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.index = fieldSetFlags()[5] ? this.index : (java.lang.Integer) defaultValue(fields()[5]);
        record.path = fieldSetFlags()[6] ? this.path : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.name = fieldSetFlags()[7] ? this.name : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.width = fieldSetFlags()[8] ? this.width : (java.lang.Integer) defaultValue(fields()[8]);
        record.height = fieldSetFlags()[9] ? this.height : (java.lang.Integer) defaultValue(fields()[9]);
        record.timestamp = fieldSetFlags()[10] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.allowed_screens = fieldSetFlags()[11] ? this.allowed_screens : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[11]);
        record.locations = fieldSetFlags()[12] ? this.locations : (java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Location>) defaultValue(fields()[12]);
        record.extra_info = fieldSetFlags()[13] ? this.extra_info : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Xmedia>
    WRITER$ = (org.apache.avro.io.DatumWriter<Xmedia>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Xmedia>
    READER$ = (org.apache.avro.io.DatumReader<Xmedia>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.color_id);

    out.writeInt(this.color_position);

    out.writeInt(this.set);

    out.writeString(this.type);

    out.writeString(this.kind);

    out.writeInt(this.index);

    out.writeString(this.path);

    out.writeString(this.name);

    out.writeInt(this.width);

    out.writeInt(this.height);

    out.writeString(this.timestamp);

    long size0 = this.allowed_screens.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.allowed_screens) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.locations.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (com.inditex.mecc.mecprwat.api.avro.v2.Location e1: this.locations) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.extra_info.size();
    out.writeMapStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e2: this.extra_info.entrySet()) {
      actualSize2++;
      out.startItem();
      out.writeString(e2.getKey());
      java.lang.CharSequence v2 = e2.getValue();
      out.writeString(v2);
    }
    out.writeMapEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size2 + ", but element count was " + actualSize2 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.color_id = in.readString(this.color_id instanceof Utf8 ? (Utf8)this.color_id : null);

      this.color_position = in.readInt();

      this.set = in.readInt();

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      this.kind = in.readString(this.kind instanceof Utf8 ? (Utf8)this.kind : null);

      this.index = in.readInt();

      this.path = in.readString(this.path instanceof Utf8 ? (Utf8)this.path : null);

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.width = in.readInt();

      this.height = in.readInt();

      this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.allowed_screens;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("allowed_screens").schema());
        this.allowed_screens = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Location> a1 = this.locations;
      if (a1 == null) {
        a1 = new SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.Location>((int)size1, SCHEMA$.getField("locations").schema());
        this.locations = a1;
      } else a1.clear();
      SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.Location> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.Location>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          com.inditex.mecc.mecprwat.api.avro.v2.Location e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new com.inditex.mecc.mecprwat.api.avro.v2.Location();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

      long size2 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m2 = this.extra_info; // Need fresh name due to limitation of macro system
      if (m2 == null) {
        m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size2);
        this.extra_info = m2;
      } else m2.clear();
      for ( ; 0 < size2; size2 = in.mapNext()) {
        for ( ; size2 != 0; size2--) {
          java.lang.CharSequence k2 = null;
          k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
          java.lang.CharSequence v2 = null;
          v2 = in.readString(v2 instanceof Utf8 ? (Utf8)v2 : null);
          m2.put(k2, v2);
        }
      }

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.color_id = in.readString(this.color_id instanceof Utf8 ? (Utf8)this.color_id : null);
          break;

        case 1:
          this.color_position = in.readInt();
          break;

        case 2:
          this.set = in.readInt();
          break;

        case 3:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 4:
          this.kind = in.readString(this.kind instanceof Utf8 ? (Utf8)this.kind : null);
          break;

        case 5:
          this.index = in.readInt();
          break;

        case 6:
          this.path = in.readString(this.path instanceof Utf8 ? (Utf8)this.path : null);
          break;

        case 7:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 8:
          this.width = in.readInt();
          break;

        case 9:
          this.height = in.readInt();
          break;

        case 10:
          this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
          break;

        case 11:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.allowed_screens;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("allowed_screens").schema());
            this.allowed_screens = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 12:
          long size1 = in.readArrayStart();
          java.util.List<com.inditex.mecc.mecprwat.api.avro.v2.Location> a1 = this.locations;
          if (a1 == null) {
            a1 = new SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.Location>((int)size1, SCHEMA$.getField("locations").schema());
            this.locations = a1;
          } else a1.clear();
          SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.Location> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.inditex.mecc.mecprwat.api.avro.v2.Location>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              com.inditex.mecc.mecprwat.api.avro.v2.Location e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new com.inditex.mecc.mecprwat.api.avro.v2.Location();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        case 13:
          long size2 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m2 = this.extra_info; // Need fresh name due to limitation of macro system
          if (m2 == null) {
            m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size2);
            this.extra_info = m2;
          } else m2.clear();
          for ( ; 0 < size2; size2 = in.mapNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.CharSequence k2 = null;
              k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
              java.lang.CharSequence v2 = null;
              v2 = in.readString(v2 instanceof Utf8 ? (Utf8)v2 : null);
              m2.put(k2, v2);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










